///////////////////////////////////////////////
//                                           //
//                     !                     //
//   This file is automatically generated!   //
//           Do not directly edit!           //
//                                           //
///////////////////////////////////////////////

// http://www.mingweisamuel.com/riotapi-schema/tool/
// Version 50e0dd62c27c4cbb1b353fc311529f937c279806

namespace accountV1 {
    /**
     * AccountDto data object, automatically generated.
     */
    export interface AccountDto {
        puuid: string;
        /** This field may be excluded from the response if the account doesn't have a gameName. */
        gameName?: string | null;
        /** This field may be excluded from the response if the account doesn't have a tagLine. */
        tagLine?: string | null;
    }
}

namespace accountV1 {
    /**
     * ActiveShardDto data object, automatically generated.
     */
    export interface ActiveShardDto {
        puuid: string;
        game: string;
        activeShard: string;
    }
}

namespace championMasteryV4 {
    /**
     * ChampionMasteryDto data object, automatically generated.
     * # Description
     * This object contains single Champion Mastery information for player and champion combination.
     */
    export interface ChampionMasteryDto {
        /** Number of points needed to achieve next level. Zero if player reached maximum champion level for this champion. */
        championPointsUntilNextLevel: long;
        /** Is chest granted for this champion or not in current season. */
        chestGranted: boolean;
        /** Champion ID for this entry. */
        championId: long;
        /** Last time this champion was played by this player - in Unix milliseconds time format. */
        lastPlayTime: long;
        /** Champion level for specified player and champion combination. */
        championLevel: int;
        /** Summoner ID for this entry. (Encrypted) */
        summonerId: string;
        /** Total number of champion points for this player and champion combination - they are used to determine championLevel. */
        championPoints: int;
        /** Number of points earned since current level has been achieved. */
        championPointsSinceLastLevel: long;
        /** The token earned for this champion at the current championLevel. When the championLevel is advanced the tokensEarned resets to 0. */
        tokensEarned: int;
        puuid?: string | null;
    }
}

namespace championV3 {
    /**
     * ChampionInfo data object, automatically generated.
     */
    export interface ChampionInfo {
        maxNewPlayerLevel: int;
        freeChampionIdsForNewPlayers: int[];
        freeChampionIds: int[];
    }
}

namespace clashV1 {
    /**
     * PlayerDto data object, automatically generated.
     */
    export interface PlayerDto {
        summonerId: string;
        teamId?: string | null;
        /** (Legal values:  UNSELECTED,  FILL,  TOP,  JUNGLE,  MIDDLE,  BOTTOM,  UTILITY) */
        position: "UNSELECTED" | "FILL" | "TOP" | "JUNGLE" | "MIDDLE" | "BOTTOM" | "UTILITY";
        /** (Legal values:  CAPTAIN,  MEMBER) */
        role: "CAPTAIN" | "MEMBER";
    }
}

namespace clashV1 {
    /**
     * TeamDto data object, automatically generated.
     */
    export interface TeamDto {
        id: string;
        tournamentId: int;
        name: string;
        iconId: int;
        tier: int;
        /** Summoner ID of the team captain. */
        captain: string;
        abbreviation: string;
        /** Team members. */
        players: clashV1.PlayerDto[];
    }
}

namespace clashV1 {
    /**
     * TournamentDto data object, automatically generated.
     */
    export interface TournamentDto {
        id: int;
        themeId: int;
        nameKey: string;
        nameKeySecondary: string;
        /** Tournament phase. */
        schedule: clashV1.TournamentPhaseDto[];
    }
}

namespace clashV1 {
    /**
     * TournamentPhaseDto data object, automatically generated.
     */
    export interface TournamentPhaseDto {
        id: int;
        registrationTime: long;
        startTime: long;
        cancelled: boolean;
    }
}

namespace leagueExpV4 {
    /**
     * LeagueEntryDTO data object, automatically generated.
     */
    export interface LeagueEntryDTO {
        leagueId: string;
        /** Player's summonerId (Encrypted) */
        summonerId: string;
        summonerName: string;
        queueType: string;
        tier: string;
        /** The player's division within a tier. */
        rank: string;
        leaguePoints: int;
        /** Winning team on Summoners Rift. First placement in Teamfight Tactics. */
        wins: int;
        /** Losing team on Summoners Rift. Second through eighth placement in Teamfight Tactics. */
        losses: int;
        hotStreak: boolean;
        veteran: boolean;
        freshBlood: boolean;
        inactive: boolean;
        miniSeries?: leagueExpV4.MiniSeriesDTO | null;
    }
}

namespace leagueExpV4 {
    /**
     * MiniSeriesDTO data object, automatically generated.
     */
    export interface MiniSeriesDTO {
        losses: int;
        progress: string;
        target: int;
        wins: int;
    }
}

namespace leagueV4 {
    /**
     * LeagueListDTO data object, automatically generated.
     */
    export interface LeagueListDTO {
        leagueId?: string | null;
        entries: leagueV4.LeagueItemDTO[];
        tier: string;
        name?: string | null;
        queue?: string | null;
    }
}

namespace leagueV4 {
    /**
     * LeagueItemDTO data object, automatically generated.
     */
    export interface LeagueItemDTO {
        freshBlood: boolean;
        /** Winning team on Summoners Rift. */
        wins: int;
        summonerName: string;
        miniSeries?: leagueV4.MiniSeriesDTO | null;
        inactive: boolean;
        veteran: boolean;
        hotStreak: boolean;
        rank: string;
        leaguePoints: int;
        /** Losing team on Summoners Rift. */
        losses: int;
        /** Player's encrypted summonerId. */
        summonerId: string;
    }
}

namespace leagueV4 {
    /**
     * MiniSeriesDTO data object, automatically generated.
     */
    export interface MiniSeriesDTO {
        losses: int;
        progress: string;
        target: int;
        wins: int;
    }
}

namespace leagueV4 {
    /**
     * LeagueEntryDTO data object, automatically generated.
     */
    export interface LeagueEntryDTO {
        leagueId?: string | null;
        /** Player's encrypted summonerId. */
        summonerId: string;
        summonerName: string;
        queueType: string;
        tier?: string | null;
        /** The player's division within a tier. */
        rank?: string | null;
        leaguePoints: int;
        /** Winning team on Summoners Rift. */
        wins: int;
        /** Losing team on Summoners Rift. */
        losses: int;
        hotStreak: boolean;
        veteran: boolean;
        freshBlood: boolean;
        inactive: boolean;
        miniSeries?: leagueV4.MiniSeriesDTO | null;
    }
}

namespace lolChallengesV1 {
    /**
     * ChallengeConfigInfoDto data object, automatically generated.
     */
    export interface ChallengeConfigInfoDto {
        id: long;
        localizedNames: { [key: string]: { [key: string]: string } };
        /** DISABLED - not visible and not calculated, HIDDEN - not visible, but calculated, ENABLED - visible and calculated, ARCHIVED - visible, but not calculated */
        state: "DISABLED" | "HIDDEN" | "ENABLED" | "ARCHIVED";
        /** LIFETIME - stats are incremented without reset, SEASON - stats are accumulated by season and reset at the beginning of new season */
        tracking?: "LIFETIME" | "SEASON" | null;
        startTimestamp?: long | null;
        endTimestamp?: long | null;
        leaderboard: boolean;
        thresholds: { [key: string]: double };
    }
}

namespace lolChallengesV1 {
    /**
     * ApexPlayerInfoDto data object, automatically generated.
     */
    export interface ApexPlayerInfoDto {
        puuid: string;
        value: double;
        position: int;
    }
}

namespace lolChallengesV1 {
    /**
     * PlayerInfoDto data object, automatically generated.
     */
    export interface PlayerInfoDto {
        challenges: lolChallengesV1.ChallengeInfo[];
        preferences: lolChallengesV1.PlayerClientPreferences;
        totalPoints: lolChallengesV1.ChallengePoints;
        categoryPoints: { [key: string]: lolChallengesV1.ChallengePoints };
    }
}

namespace lolChallengesV1 {
    /**
     * ChallengeInfo data object, automatically generated.
     */
    export interface ChallengeInfo {
        challengeId: long;
        percentile: double;
        level: string;
        value: double;
        achievedTime?: long | null;
        position?: long | null;
        playersInLevel?: long | null;
    }
}

namespace lolChallengesV1 {
    /**
     * PlayerClientPreferences data object, automatically generated.
     */
    export interface PlayerClientPreferences {
        bannerAccent?: string | null;
        title?: string | null;
        challengeIds?: long[] | null;
        crestBorder?: string | null;
        prestigeCrestBorderLevel?: int | null;
    }
}

namespace lolChallengesV1 {
    /**
     * ChallengePoints data object, automatically generated.
     */
    export interface ChallengePoints {
        level: string;
        current: long;
        max: long;
        percentile?: double | null;
    }
}

namespace lolStatusV4 {
    /**
     * PlatformDataDto data object, automatically generated.
     */
    export interface PlatformDataDto {
        id: string;
        name: string;
        locales: string[];
        maintenances: lolStatusV4.StatusDto[];
        incidents: lolStatusV4.StatusDto[];
    }
}

namespace lolStatusV4 {
    /**
     * StatusDto data object, automatically generated.
     */
    export interface StatusDto {
        id: int;
        /** (Legal values:  scheduled,  in_progress,  complete) */
        maintenance_status?: "scheduled" | "in_progress" | "complete" | null;
        /** (Legal values:  info,  warning,  critical) */
        incident_severity?: "info" | "warning" | "critical" | null;
        titles: lolStatusV4.ContentDto[];
        updates: lolStatusV4.UpdateDto[];
        created_at: string;
        archive_at?: string | null;
        updated_at?: string | null;
        /** (Legal values: windows, macos, android, ios, ps4, xbone, switch) */
        platforms: "windows" | "macos" | "android" | "ios" | "ps4" | "xbone" | "switch"[];
    }
}

namespace lolStatusV4 {
    /**
     * ContentDto data object, automatically generated.
     */
    export interface ContentDto {
        locale: string;
        content: string;
    }
}

namespace lolStatusV4 {
    /**
     * UpdateDto data object, automatically generated.
     */
    export interface UpdateDto {
        id: int;
        author: string;
        publish: boolean;
        /** (Legal values: riotclient, riotstatus, game) */
        publish_locations: "riotclient" | "riotstatus" | "game"[];
        translations: lolStatusV4.ContentDto[];
        created_at: string;
        updated_at: string;
    }
}

namespace lorDeckV1 {
    /**
     * DeckDto data object, automatically generated.
     */
    export interface DeckDto {
        id: string;
        name: string;
        code: string;
    }
}

namespace lorDeckV1 {
    /**
     * NewDeckDto data object, automatically generated.
     */
    export interface NewDeckDto {
        name: string;
        code: string;
    }
}

namespace lorInventoryV1 {
    /**
     * CardDto data object, automatically generated.
     */
    export interface CardDto {
        code: string;
        count: string;
    }
}

namespace lorMatchV1 {
    /**
     * MatchDto data object, automatically generated.
     */
    export interface MatchDto {
        /** Match metadata. */
        metadata: lorMatchV1.MetadataDto;
        /** Match info. */
        info: lorMatchV1.InfoDto;
    }
}

namespace lorMatchV1 {
    /**
     * MetadataDto data object, automatically generated.
     */
    export interface MetadataDto {
        /** Match data version. */
        data_version: string;
        /** Match id. */
        match_id: string;
        /** A list of participant PUUIDs. */
        participants: string[];
    }
}

namespace lorMatchV1 {
    /**
     * InfoDto data object, automatically generated.
     */
    export interface InfoDto {
        /** (Legal values:  Constructed,  Expeditions,  Tutorial) */
        game_mode: "Constructed" | "Expeditions" | "Tutorial";
        /** (Legal values:  Ranked,  Normal,  AI,  Tutorial,  VanillaTrial,  Singleton,  StandardGauntlet) */
        game_type: "Ranked" | "Normal" | "AI" | "Tutorial" | "VanillaTrial" | "Singleton" | "StandardGauntlet";
        game_start_time_utc: string;
        game_version: string;
        /** (Legal values:  standard,  eternal) */
        game_format: "standard" | "eternal";
        players: lorMatchV1.PlayerDto[];
        /** Total turns taken by both players. */
        total_turn_count: int;
    }
}

namespace lorMatchV1 {
    /**
     * PlayerDto data object, automatically generated.
     */
    export interface PlayerDto {
        puuid: string;
        deck_id: string;
        /** Code for the deck played. Refer to LOR documentation for details on deck codes. */
        deck_code: string;
        factions: string[];
        game_outcome: string;
        /** The order in which the players took turns. */
        order_of_play: int;
    }
}

namespace lorRankedV1 {
    /**
     * LeaderboardDto data object, automatically generated.
     */
    export interface LeaderboardDto {
        /** A list of players in Master tier. */
        players: lorRankedV1.PlayerDto[];
    }
}

namespace lorRankedV1 {
    /**
     * PlayerDto data object, automatically generated.
     */
    export interface PlayerDto {
        name: string;
        rank: int;
        /** League points. */
        lp: int;
    }
}

namespace lorStatusV1 {
    /**
     * PlatformDataDto data object, automatically generated.
     */
    export interface PlatformDataDto {
        id: string;
        name: string;
        locales: string[];
        maintenances: lorStatusV1.StatusDto[];
        incidents: lorStatusV1.StatusDto[];
    }
}

namespace lorStatusV1 {
    /**
     * StatusDto data object, automatically generated.
     */
    export interface StatusDto {
        id: int;
        /** (Legal values:  scheduled,  in_progress,  complete) */
        maintenance_status: "scheduled" | "in_progress" | "complete";
        /** (Legal values:  info,  warning,  critical) */
        incident_severity: "info" | "warning" | "critical";
        titles: lorStatusV1.ContentDto[];
        updates: lorStatusV1.UpdateDto[];
        created_at: string;
        archive_at: string;
        updated_at: string;
        /** (Legal values: windows, macos, android, ios, ps4, xbone, switch) */
        platforms: "windows" | "macos" | "android" | "ios" | "ps4" | "xbone" | "switch"[];
    }
}

namespace lorStatusV1 {
    /**
     * ContentDto data object, automatically generated.
     */
    export interface ContentDto {
        locale: string;
        content: string;
    }
}

namespace lorStatusV1 {
    /**
     * UpdateDto data object, automatically generated.
     */
    export interface UpdateDto {
        id: int;
        author: string;
        publish: boolean;
        /** (Legal values: riotclient, riotstatus, game) */
        publish_locations: "riotclient" | "riotstatus" | "game"[];
        translations: lorStatusV1.ContentDto[];
        created_at: string;
        updated_at: string;
    }
}

namespace matchV5 {
    /**
     * MatchDto data object, automatically generated.
     */
    export interface MatchDto {
        /** Match metadata. */
        metadata: matchV5.MetadataDto;
        /** Match info. */
        info: matchV5.InfoDto;
    }
}

namespace matchV5 {
    /**
     * MetadataDto data object, automatically generated.
     */
    export interface MetadataDto {
        /** Match data version. */
        dataVersion: string;
        /** Match id. */
        matchId: string;
        /** A list of participant PUUIDs. */
        participants: string[];
    }
}

namespace matchV5 {
    /**
     * InfoDto data object, automatically generated.
     */
    export interface InfoDto {
        /** Unix timestamp for when the game is created on the game server (i.e., the loading screen). */
        gameCreation: long;
        /** Prior to patch 11.20, this field returns the game length in milliseconds calculated from gameEndTimestamp - gameStartTimestamp. Post patch 11.20, this field returns the max timePlayed of any participant in the game in seconds, which makes the behavior of this field consistent with that of match-v4. The best way to handling the change in this field is to treat the value as milliseconds if the gameEndTimestamp field isn't in the response and to treat the value as seconds if gameEndTimestamp is in the response. */
        gameDuration: long;
        /** Unix timestamp for when match ends on the game server. This timestamp can occasionally be significantly longer than when the match "ends". The most reliable way of determining the timestamp for the end of the match would be to add the max time played of any participant to the gameStartTimestamp. This field was added to match-v5 in patch 11.20 on Oct 5th, 2021. */
        gameEndTimestamp?: long | null;
        gameId: long;
        /** Refer to the Game Constants documentation. */
        gameMode: string;
        gameName: string;
        /** Unix timestamp for when match starts on the game server. */
        gameStartTimestamp: long;
        gameType: string;
        /** The first two parts can be used to determine the patch a game was played on. */
        gameVersion: string;
        /** Refer to the Game Constants documentation. */
        mapId: int;
        participants: matchV5.ParticipantDto[];
        /** Platform where the match was played. */
        platformId: string;
        /** Refer to the Game Constants documentation. */
        queueId: int;
        teams: matchV5.TeamDto[];
        /** Tournament code used to generate the match. This field was added to match-v5 in patch 11.13 on June 23rd, 2021. */
        tournamentCode?: string | null;
        endOfGameResult?: string | null;
    }
}

namespace matchV5 {
    /**
     * ParticipantDto data object, automatically generated.
     */
    export interface ParticipantDto {
        assists: int;
        baronKills: int;
        bountyLevel: int;
        champExperience: int;
        champLevel: int;
        /** Prior to patch 11.4, on Feb 18th, 2021, this field returned invalid championIds. We recommend determining the champion based on the championName field for matches played prior to patch 11.4. */
        championId: int;
        championName: string;
        /** This field is currently only utilized for Kayn's transformations. (Legal values: 0 - None, 1 - Slayer, 2 - Assassin) */
        championTransform: int;
        consumablesPurchased: int;
        damageDealtToBuildings?: int | null;
        damageDealtToObjectives: int;
        damageDealtToTurrets: int;
        damageSelfMitigated: int;
        deaths: int;
        detectorWardsPlaced: int;
        doubleKills: int;
        dragonKills: int;
        firstBloodAssist: boolean;
        firstBloodKill: boolean;
        firstTowerAssist: boolean;
        firstTowerKill: boolean;
        gameEndedInEarlySurrender: boolean;
        gameEndedInSurrender: boolean;
        goldEarned: int;
        goldSpent: int;
        /** Both individualPosition and teamPosition are computed by the game server and are different versions of the most likely position played by a player. The individualPosition is the best guess for which position the player actually played in isolation of anything else. The teamPosition is the best guess for which position the player actually played if we add the constraint that each team must have one top player, one jungle, one middle, etc. Generally the recommendation is to use the teamPosition field over the individualPosition field. */
        individualPosition: string;
        inhibitorKills: int;
        inhibitorTakedowns?: int | null;
        inhibitorsLost?: int | null;
        item0: int;
        item1: int;
        item2: int;
        item3: int;
        item4: int;
        item5: int;
        item6: int;
        itemsPurchased: int;
        killingSprees: int;
        kills: int;
        lane: string;
        largestCriticalStrike: int;
        largestKillingSpree: int;
        largestMultiKill: int;
        longestTimeSpentLiving: int;
        magicDamageDealt: int;
        magicDamageDealtToChampions: int;
        magicDamageTaken: int;
        neutralMinionsKilled: int;
        nexusKills: int;
        nexusTakedowns?: int | null;
        nexusLost?: int | null;
        objectivesStolen: int;
        objectivesStolenAssists: int;
        participantId: int;
        pentaKills: int;
        perks: matchV5.PerksDto;
        physicalDamageDealt: int;
        physicalDamageDealtToChampions: int;
        physicalDamageTaken: int;
        profileIcon: int;
        puuid: string;
        quadraKills: int;
        /** Replaced by `riotIdGameName` in games played in patch 14.5 and after. */
        riotIdName?: string | null;
        /** Use `riotIdName` for games before patch 14.5. */
        riotIdGameName?: string | null;
        riotIdTagline: string;
        role: string;
        sightWardsBoughtInGame: int;
        spell1Casts: int;
        spell2Casts: int;
        spell3Casts: int;
        spell4Casts: int;
        summoner1Casts: int;
        summoner1Id: int;
        summoner2Casts: int;
        summoner2Id: int;
        summonerId: string;
        summonerLevel: int;
        summonerName: string;
        teamEarlySurrendered: boolean;
        teamId: int;
        /** Both individualPosition and teamPosition are computed by the game server and are different versions of the most likely position played by a player. The individualPosition is the best guess for which position the player actually played in isolation of anything else. The teamPosition is the best guess for which position the player actually played if we add the constraint that each team must have one top player, one jungle, one middle, etc. Generally the recommendation is to use the teamPosition field over the individualPosition field. */
        teamPosition: string;
        timeCCingOthers: int;
        timePlayed: int;
        totalDamageDealt: int;
        totalDamageDealtToChampions: int;
        totalDamageShieldedOnTeammates: int;
        totalDamageTaken: int;
        totalHeal: int;
        totalHealsOnTeammates: int;
        totalMinionsKilled: int;
        totalTimeCCDealt: int;
        totalTimeSpentDead: int;
        totalUnitsHealed: int;
        tripleKills: int;
        trueDamageDealt: int;
        trueDamageDealtToChampions: int;
        trueDamageTaken: int;
        turretKills: int;
        turretTakedowns?: int | null;
        turretsLost?: int | null;
        unrealKills: int;
        visionScore: int;
        visionWardsBoughtInGame: int;
        wardsKilled: int;
        wardsPlaced: int;
        win: boolean;
        allInPings?: int | null;
        assistMePings?: int | null;
        baitPings?: int | null;
        basicPings?: int | null;
        commandPings?: int | null;
        dangerPings?: int | null;
        enemyMissingPings?: int | null;
        enemyVisionPings?: int | null;
        getBackPings?: int | null;
        holdPings?: int | null;
        needVisionPings?: int | null;
        onMyWayPings?: int | null;
        pushPings?: int | null;
        visionClearedPings?: int | null;
        eligibleForProgression?: boolean | null;
        challenges?: matchV5.ParticipantChallenges | null;
        totalAllyJungleMinionsKilled?: int | null;
        totalEnemyJungleMinionsKilled?: int | null;
        playerAugment1?: int | null;
        playerAugment2?: int | null;
        playerAugment3?: int | null;
        playerAugment4?: int | null;
        playerSubteamId?: int | null;
        subteamPlacement?: int | null;
        placement?: int | null;
        missions?: matchV5.ParticipantMissions | null;
        playerScore0?: int | null;
        playerScore1?: int | null;
        playerScore10?: int | null;
        playerScore11?: int | null;
        playerScore2?: int | null;
        playerScore3?: int | null;
        playerScore4?: int | null;
        playerScore5?: int | null;
        playerScore6?: int | null;
        playerScore7?: int | null;
        playerScore8?: int | null;
        playerScore9?: int | null;
    }
}

namespace matchV5 {
    /**
     * PerksDto data object, automatically generated.
     */
    export interface PerksDto {
        statPerks: matchV5.PerkStatsDto;
        styles: matchV5.PerkStyleDto[];
    }
}

namespace matchV5 {
    /**
     * PerkStatsDto data object, automatically generated.
     */
    export interface PerkStatsDto {
        defense: int;
        flex: int;
        offense: int;
    }
}

namespace matchV5 {
    /**
     * PerkStyleDto data object, automatically generated.
     */
    export interface PerkStyleDto {
        description: string;
        selections: matchV5.PerkStyleSelectionDto[];
        style: int;
    }
}

namespace matchV5 {
    /**
     * PerkStyleSelectionDto data object, automatically generated.
     */
    export interface PerkStyleSelectionDto {
        perk: int;
        var1: int;
        var2: int;
        var3: int;
    }
}

namespace matchV5 {
    /**
     * TeamDto data object, automatically generated.
     */
    export interface TeamDto {
        bans: matchV5.BanDto[];
        objectives: matchV5.ObjectivesDto;
        teamId: int;
        win: boolean;
    }
}

namespace matchV5 {
    /**
     * BanDto data object, automatically generated.
     */
    export interface BanDto {
        championId: int;
        pickTurn: int;
    }
}

namespace matchV5 {
    /**
     * ObjectivesDto data object, automatically generated.
     */
    export interface ObjectivesDto {
        baron: matchV5.ObjectiveDto;
        champion: matchV5.ObjectiveDto;
        dragon: matchV5.ObjectiveDto;
        inhibitor: matchV5.ObjectiveDto;
        riftHerald: matchV5.ObjectiveDto;
        tower: matchV5.ObjectiveDto;
        horde?: matchV5.ObjectiveDto | null;
    }
}

namespace matchV5 {
    /**
     * ObjectiveDto data object, automatically generated.
     */
    export interface ObjectiveDto {
        first: boolean;
        kills: int;
    }
}

namespace matchV5 {
    /**
     * MatchTimelineDto data object, automatically generated.
     */
    export interface MatchTimelineDto {
        metadata: matchV5.MetadataDto;
        info: matchV5.MatchTimelineInfo;
    }
}

namespace spectatorTftV5 {
    /**
     * CurrentGameInfo data object, automatically generated.
     */
    export interface CurrentGameInfo {
        /** The ID of the game */
        gameId: long;
        /** The game type */
        gameType: string;
        /** The game start time represented in epoch milliseconds */
        gameStartTime: long;
        /** The ID of the map */
        mapId: long;
        /** The amount of time in seconds that has passed since the game started */
        gameLength: long;
        /** The ID of the platform on which the game is being played */
        platformId: string;
        /** The game mode */
        gameMode: string;
        /** Banned champion information */
        bannedChampions: spectatorTftV5.BannedChampion[];
        /** The queue type (queue types are documented on the Game Constants page) */
        gameQueueConfigId?: long | null;
        /** The observer information */
        observers: spectatorTftV5.Observer;
        /** The participant information */
        participants: spectatorTftV5.CurrentGameParticipant[];
    }
}

namespace spectatorTftV5 {
    /**
     * BannedChampion data object, automatically generated.
     */
    export interface BannedChampion {
        /** The turn during which the champion was banned */
        pickTurn: int;
        /** The ID of the banned champion */
        championId: long;
        /** The ID of the team that banned the champion */
        teamId: long;
    }
}

namespace spectatorTftV5 {
    /**
     * Observer data object, automatically generated.
     */
    export interface Observer {
        /** Key used to decrypt the spectator grid game data for playback */
        encryptionKey: string;
    }
}

namespace spectatorTftV5 {
    /**
     * CurrentGameParticipant data object, automatically generated.
     */
    export interface CurrentGameParticipant {
        /** The ID of the champion played by this participant */
        championId: long;
        /** Perks/Runes Reforged Information */
        perks?: spectatorV5.Perks | null;
        /** The ID of the profile icon used by this participant */
        profileIconId: long;
        /** The team ID of this participant, indicating the participant's team */
        teamId: long;
        /** The summoner name of this participant */
        summonerName: string;
        /** The encrypted summoner ID of this participant */
        summonerId: string;
        /** The encrypted puuid of this participant */
        puuid?: string | null;
        /** The ID of the first summoner spell used by this participant */
        spell1Id: long;
        /** The ID of the second summoner spell used by this participant */
        spell2Id: long;
        /** List of Game Customizations */
        gameCustomizationObjects: spectatorV5.GameCustomizationObject[];
        riotId?: string | null;
    }
}

namespace spectatorTftV5 {
    /**
     * Perks data object, automatically generated.
     */
    export interface Perks {
        /** IDs of the perks/runes assigned. */
        perkIds: long[];
        /** Primary runes path */
        perkStyle: long;
        /** Secondary runes path */
        perkSubStyle: long;
    }
}

namespace spectatorTftV5 {
    /**
     * GameCustomizationObject data object, automatically generated.
     */
    export interface GameCustomizationObject {
        /** Category identifier for Game Customization */
        category: string;
        /** Game Customization content */
        content: string;
    }
}

namespace spectatorTftV5 {
    /**
     * FeaturedGames data object, automatically generated.
     */
    export interface FeaturedGames {
        /** The list of featured games */
        gameList: spectatorTftV5.FeaturedGameInfo[];
        /** The suggested interval to wait before requesting FeaturedGames again */
        clientRefreshInterval?: long | null;
    }
}

namespace spectatorTftV5 {
    /**
     * FeaturedGameInfo data object, automatically generated.
     */
    export interface FeaturedGameInfo {
        /** The game mode
             (Legal values:  TFT) */
        gameMode: "TFT";
        /** The amount of time in seconds that has passed since the game started */
        gameLength: long;
        /** The ID of the map */
        mapId: long;
        /** The game type
             (Legal values:  MATCHED) */
        gameType: "MATCHED";
        /** Banned champion information */
        bannedChampions: spectatorTftV5.BannedChampion[];
        /** The ID of the game */
        gameId: long;
        /** The observer information */
        observers: spectatorTftV5.Observer;
        /** The queue type (queue types are documented on the Game Constants page) */
        gameQueueConfigId: long;
        /** The participant information */
        participants: spectatorTftV5.Participant[];
        /** The ID of the platform on which the game is being played */
        platformId: string;
    }
}

namespace spectatorTftV5 {
    /**
     * Participant data object, automatically generated.
     */
    export interface Participant {
        /** The ID of the second summoner spell used by this participant */
        spell2Id: long;
        /** The ID of the profile icon used by this participant */
        profileIconId: long;
        /** The summoner name of this participant */
        summonerName: string;
        /** Encrypted summoner ID of this participant */
        summonerId?: string | null;
        /** Encrypted puuid of this participant */
        puuid?: string | null;
        /** The ID of the champion played by this participant */
        championId: long;
        /** The team ID of this participant, indicating the participant's team */
        teamId: long;
        /** The ID of the first summoner spell used by this participant */
        spell1Id: long;
        riotId?: string | null;
    }
}

namespace spectatorV5 {
    /**
     * CurrentGameInfo data object, automatically generated.
     */
    export interface CurrentGameInfo {
        /** The ID of the game */
        gameId: long;
        /** The game type */
        gameType: string;
        /** The game start time represented in epoch milliseconds */
        gameStartTime: long;
        /** The ID of the map */
        mapId: long;
        /** The amount of time in seconds that has passed since the game started */
        gameLength: long;
        /** The ID of the platform on which the game is being played */
        platformId: string;
        /** The game mode */
        gameMode: string;
        /** Banned champion information */
        bannedChampions: spectatorV5.BannedChampion[];
        /** The queue type (queue types are documented on the Game Constants page) */
        gameQueueConfigId?: long | null;
        /** The observer information */
        observers: spectatorV5.Observer;
        /** The participant information */
        participants: spectatorV5.CurrentGameParticipant[];
    }
}

namespace spectatorV5 {
    /**
     * BannedChampion data object, automatically generated.
     */
    export interface BannedChampion {
        /** The turn during which the champion was banned */
        pickTurn: int;
        /** The ID of the banned champion */
        championId: long;
        /** The ID of the team that banned the champion */
        teamId: long;
    }
}

namespace spectatorV5 {
    /**
     * Observer data object, automatically generated.
     */
    export interface Observer {
        /** Key used to decrypt the spectator grid game data for playback */
        encryptionKey: string;
    }
}

namespace spectatorV5 {
    /**
     * CurrentGameParticipant data object, automatically generated.
     */
    export interface CurrentGameParticipant {
        /** The ID of the champion played by this participant */
        championId: long;
        /** Perks/Runes Reforged Information */
        perks?: spectatorV5.Perks | null;
        /** The ID of the profile icon used by this participant */
        profileIconId: long;
        /** Flag indicating whether or not this participant is a bot */
        bot: boolean;
        /** The team ID of this participant, indicating the participant's team */
        teamId: long;
        /** The summoner name of this participant */
        summonerName: string;
        /** The encrypted summoner ID of this participant */
        summonerId: string;
        /** The encrypted puuid of this participant */
        puuid?: string | null;
        /** The ID of the first summoner spell used by this participant */
        spell1Id: long;
        /** The ID of the second summoner spell used by this participant */
        spell2Id: long;
        /** List of Game Customizations */
        gameCustomizationObjects: spectatorV5.GameCustomizationObject[];
        riotId?: string | null;
    }
}

namespace spectatorV5 {
    /**
     * Perks data object, automatically generated.
     */
    export interface Perks {
        /** IDs of the perks/runes assigned. */
        perkIds: long[];
        /** Primary runes path */
        perkStyle: long;
        /** Secondary runes path */
        perkSubStyle: long;
    }
}

namespace spectatorV5 {
    /**
     * GameCustomizationObject data object, automatically generated.
     */
    export interface GameCustomizationObject {
        /** Category identifier for Game Customization */
        category: string;
        /** Game Customization content */
        content: string;
    }
}

namespace spectatorV5 {
    /**
     * FeaturedGames data object, automatically generated.
     */
    export interface FeaturedGames {
        /** The list of featured games */
        gameList: spectatorV5.FeaturedGameInfo[];
        /** The suggested interval to wait before requesting FeaturedGames again */
        clientRefreshInterval?: long | null;
    }
}

namespace spectatorV5 {
    /**
     * FeaturedGameInfo data object, automatically generated.
     */
    export interface FeaturedGameInfo {
        /** The game mode
             (Legal values:  CLASSIC,  ODIN,  ARAM,  TUTORIAL,  ONEFORALL,  ASCENSION,  FIRSTBLOOD,  KINGPORO) */
        gameMode: "CLASSIC" | "ODIN" | "ARAM" | "TUTORIAL" | "ONEFORALL" | "ASCENSION" | "FIRSTBLOOD" | "KINGPORO";
        /** The amount of time in seconds that has passed since the game started */
        gameLength: long;
        /** The ID of the map */
        mapId: long;
        /** The game type
             (Legal values:  CUSTOM_GAME,  MATCHED_GAME,  TUTORIAL_GAME) */
        gameType: "CUSTOM_GAME" | "MATCHED_GAME" | "TUTORIAL_GAME";
        /** Banned champion information */
        bannedChampions: spectatorV5.BannedChampion[];
        /** The ID of the game */
        gameId: long;
        /** The observer information */
        observers: spectatorV5.Observer;
        /** The queue type (queue types are documented on the Game Constants page) */
        gameQueueConfigId: long;
        /** The participant information */
        participants: spectatorV5.Participant[];
        /** The ID of the platform on which the game is being played */
        platformId: string;
    }
}

namespace spectatorV5 {
    /**
     * Participant data object, automatically generated.
     */
    export interface Participant {
        /** Flag indicating whether or not this participant is a bot */
        bot: boolean;
        /** The ID of the second summoner spell used by this participant */
        spell2Id: long;
        /** The ID of the profile icon used by this participant */
        profileIconId: long;
        /** The summoner name of this participant */
        summonerName: string;
        /** Encrypted summoner ID of this participant */
        summonerId?: string | null;
        /** Encrypted puuid of this participant */
        puuid?: string | null;
        /** The ID of the champion played by this participant */
        championId: long;
        /** The team ID of this participant, indicating the participant's team */
        teamId: long;
        /** The ID of the first summoner spell used by this participant */
        spell1Id: long;
        riotId?: string | null;
    }
}

namespace summonerV4 {
    /**
     * SummonerDTO data object, automatically generated.
     * # Description
     * represents a summoner
     */
    export interface SummonerDTO {
        /** Encrypted account ID. Max length 56 characters. */
        accountId: string;
        /** ID of the summoner icon associated with the summoner. */
        profileIconId: int;
        /** Date summoner was last modified specified as epoch milliseconds. The following events will update this timestamp: profile icon change, playing the tutorial or advanced tutorial, finishing a game, summoner name change */
        revisionDate: long;
        /** Summoner name. */
        name: string;
        /** Encrypted summoner ID. Max length 63 characters. */
        id: string;
        /** Encrypted PUUID. Exact length of 78 characters. */
        puuid: string;
        /** Summoner level associated with the summoner. */
        summonerLevel: long;
    }
}

namespace tftLeagueV1 {
    /**
     * LeagueListDTO data object, automatically generated.
     */
    export interface LeagueListDTO {
        leagueId?: string | null;
        entries: tftLeagueV1.LeagueItemDTO[];
        tier: string;
        name?: string | null;
        queue?: string | null;
    }
}

namespace tftLeagueV1 {
    /**
     * LeagueItemDTO data object, automatically generated.
     */
    export interface LeagueItemDTO {
        freshBlood: boolean;
        /** First placement. */
        wins: int;
        summonerName: string;
        miniSeries?: tftLeagueV1.MiniSeriesDTO | null;
        inactive: boolean;
        veteran: boolean;
        hotStreak: boolean;
        rank: string;
        leaguePoints: int;
        /** Second through eighth placement. */
        losses: int;
        /** Player's encrypted summonerId. */
        summonerId: string;
    }
}

namespace tftLeagueV1 {
    /**
     * MiniSeriesDTO data object, automatically generated.
     */
    export interface MiniSeriesDTO {
        losses: int;
        progress: string;
        target: int;
        wins: int;
    }
}

namespace tftLeagueV1 {
    /**
     * LeagueEntryDTO data object, automatically generated.
     */
    export interface LeagueEntryDTO {
        /** Player Universal Unique Identifier. Exact length of 78 characters. (Encrypted) */
        puuid?: string | null;
        /** Not included for the RANKED_TFT_TURBO queueType. */
        leagueId?: string | null;
        /** Player's encrypted summonerId. */
        summonerId: string;
        summonerName: string;
        queueType: string;
        /** Only included for the RANKED_TFT_TURBO queueType.
             (Legal values:  ORANGE,  PURPLE,  BLUE,  GREEN,  GRAY) */
        ratedTier?: "ORANGE" | "PURPLE" | "BLUE" | "GREEN" | "GRAY" | null;
        /** Only included for the RANKED_TFT_TURBO queueType. */
        ratedRating?: int | null;
        /** Not included for the RANKED_TFT_TURBO queueType. */
        tier?: string | null;
        /** The player's division within a tier. Not included for the RANKED_TFT_TURBO queueType. */
        rank?: string | null;
        /** Not included for the RANKED_TFT_TURBO queueType. */
        leaguePoints?: int | null;
        /** First placement. */
        wins: int;
        /** Second through eighth placement. */
        losses: int;
        /** Not included for the RANKED_TFT_TURBO queueType. */
        hotStreak?: boolean | null;
        /** Not included for the RANKED_TFT_TURBO queueType. */
        veteran?: boolean | null;
        /** Not included for the RANKED_TFT_TURBO queueType. */
        freshBlood?: boolean | null;
        /** Not included for the RANKED_TFT_TURBO queueType. */
        inactive?: boolean | null;
        /** Not included for the RANKED_TFT_TURBO queueType. */
        miniSeries?: tftLeagueV1.MiniSeriesDTO | null;
    }
}

namespace tftLeagueV1 {
    /**
     * TopRatedLadderEntryDto data object, automatically generated.
     */
    export interface TopRatedLadderEntryDto {
        summonerId: string;
        summonerName: string;
        /** (Legal values:  ORANGE,  PURPLE,  BLUE,  GREEN,  GRAY) */
        ratedTier: "ORANGE" | "PURPLE" | "BLUE" | "GREEN" | "GRAY";
        ratedRating: int;
        /** First placement. */
        wins: int;
        previousUpdateLadderPosition: int;
    }
}

namespace tftMatchV1 {
    /**
     * MatchDto data object, automatically generated.
     */
    export interface MatchDto {
        /** Match metadata. */
        metadata: tftMatchV1.MetadataDto;
        /** Match info. */
        info: tftMatchV1.InfoDto;
    }
}

namespace tftMatchV1 {
    /**
     * MetadataDto data object, automatically generated.
     */
    export interface MetadataDto {
        /** Match data version. */
        data_version: string;
        /** Match id. */
        match_id: string;
        /** A list of participant PUUIDs. */
        participants: string[];
    }
}

namespace tftMatchV1 {
    /**
     * InfoDto data object, automatically generated.
     */
    export interface InfoDto {
        tft_game_type?: string | null;
        tft_set_core_name?: string | null;
        /** Unix timestamp. */
        game_datetime: long;
        /** Game length in seconds. */
        game_length: float;
        /** Game variation key. Game variations documented in TFT static data. */
        game_variation?: string | null;
        /** Game client version. */
        game_version: string;
        participants: tftMatchV1.ParticipantDto[];
        /** Please refer to the League of Legends documentation. */
        queue_id: int;
        /** Teamfight Tactics set number. */
        tft_set_number: int;
        endOfGameResult?: string | null;
        gameCreation?: int | null;
        gameId?: int | null;
        mapId?: int | null;
        /** Please refer to the League of Legends documentation. */
        queueId?: int | null;
    }
}

namespace tftMatchV1 {
    /**
     * ParticipantDto data object, automatically generated.
     */
    export interface ParticipantDto {
        augments?: string[] | null;
        partner_group_id?: int | null;
        /** Participant's companion. */
        companion: tftMatchV1.CompanionDto;
        /** Gold left after participant was eliminated. */
        gold_left: int;
        /** The round the participant was eliminated in. Note: If the player was eliminated in stage 2-1 their last_round would be 5. */
        last_round: int;
        /** Participant Little Legend level. Note: This is not the number of active units. */
        level: int;
        /** Participant placement upon elimination. */
        placement: int;
        /** Number of players the participant eliminated. */
        players_eliminated: int;
        puuid: string;
        /** The number of seconds before the participant was eliminated. */
        time_eliminated: float;
        /** Damage the participant dealt to other players. */
        total_damage_to_players: int;
        /** A complete list of traits for the participant's active units. */
        traits: tftMatchV1.TraitDto[];
        /** A list of active units for the participant. */
        units: tftMatchV1.UnitDto[];
        missions?: tftMatchV1.ParticipantMissionsDto | null;
    }
}

namespace tftMatchV1 {
    /**
     * TraitDto data object, automatically generated.
     */
    export interface TraitDto {
        /** Trait name. */
        name: string;
        /** Number of units with this trait. */
        num_units: int;
        /** Current style for this trait. (0 = No style, 1 = Bronze, 2 = Silver, 3 = Gold, 4 = Chromatic) */
        style?: int | null;
        /** Current active tier for the trait. */
        tier_current: int;
        /** Total tiers for the trait. */
        tier_total?: int | null;
    }
}

namespace tftMatchV1 {
    /**
     * UnitDto data object, automatically generated.
     */
    export interface UnitDto {
        itemNames?: string[] | null;
        /** A list of the unit's items. Please refer to the Teamfight Tactics documentation for item ids. */
        items?: int[] | null;
        /** This field was introduced in patch 9.22 with data_version 2. */
        character_id: string;
        /** If a unit is chosen as part of the Fates set mechanic, the chosen trait will be indicated by this field. Otherwise this field is excluded from the response. */
        chosen?: string | null;
        /** Unit name. This field is often left blank. */
        name: string;
        /** Unit rarity. This doesn't equate to the unit cost. */
        rarity: int;
        /** Unit tier. */
        tier: int;
    }
}

namespace tftMatchV1 {
    /**
     * CompanionDto data object, automatically generated.
     */
    export interface CompanionDto {
        item_ID?: int | null;
        skin_ID: int;
        content_ID: string;
        species: string;
    }
}

namespace tftStatusV1 {
    /**
     * PlatformDataDto data object, automatically generated.
     */
    export interface PlatformDataDto {
        id: string;
        name: string;
        locales: string[];
        maintenances: tftStatusV1.StatusDto[];
        incidents: tftStatusV1.StatusDto[];
    }
}

namespace tftStatusV1 {
    /**
     * StatusDto data object, automatically generated.
     */
    export interface StatusDto {
        id: int;
        /** (Legal values:  scheduled,  in_progress,  complete) */
        maintenance_status: "scheduled" | "in_progress" | "complete";
        /** (Legal values:  info,  warning,  critical) */
        incident_severity: "info" | "warning" | "critical";
        titles: tftStatusV1.ContentDto[];
        updates: tftStatusV1.UpdateDto[];
        created_at: string;
        archive_at: string;
        updated_at: string;
        /** (Legal values: windows, macos, android, ios, ps4, xbone, switch) */
        platforms: "windows" | "macos" | "android" | "ios" | "ps4" | "xbone" | "switch"[];
    }
}

namespace tftStatusV1 {
    /**
     * ContentDto data object, automatically generated.
     */
    export interface ContentDto {
        locale: string;
        content: string;
    }
}

namespace tftStatusV1 {
    /**
     * UpdateDto data object, automatically generated.
     */
    export interface UpdateDto {
        id: int;
        author: string;
        publish: boolean;
        /** (Legal values: riotclient, riotstatus, game) */
        publish_locations: "riotclient" | "riotstatus" | "game"[];
        translations: tftStatusV1.ContentDto[];
        created_at: string;
        updated_at: string;
    }
}

namespace tftSummonerV1 {
    /**
     * SummonerDTO data object, automatically generated.
     * # Description
     * represents a summoner
     */
    export interface SummonerDTO {
        /** Encrypted account ID. Max length 56 characters. */
        accountId: string;
        /** ID of the summoner icon associated with the summoner. */
        profileIconId: int;
        /** Date summoner was last modified specified as epoch milliseconds. The following events will update this timestamp: summoner name change, summoner level change, or profile icon change. */
        revisionDate: long;
        /** Summoner name. */
        name: string;
        /** Encrypted summoner ID. Max length 63 characters. */
        id: string;
        /** Encrypted PUUID. Exact length of 78 characters. */
        puuid: string;
        /** Summoner level associated with the summoner. */
        summonerLevel: long;
    }
}

namespace tournamentStubV5 {
    /**
     * TournamentCodeParametersV5 data object, automatically generated.
     */
    export interface TournamentCodeParametersV5 {
        /** Optional list of encrypted puuids in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future. */
        allowedParticipants?: string[] | null;
        /** Optional string that may contain any data in any format, if specified at all. Used to denote any custom information about the game. */
        metadata?: string | null;
        /** The team size of the game. Valid values are 1-5. */
        teamSize: int;
        /** The pick type of the game.
             (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT) */
        pickType: "BLIND_PICK" | "DRAFT_MODE" | "ALL_RANDOM" | "TOURNAMENT_DRAFT";
        /** The map type of the game.
             (Legal values:  SUMMONERS_RIFT,  HOWLING_ABYSS) */
        mapType: "SUMMONERS_RIFT" | "HOWLING_ABYSS";
        /** The spectator type of the game.
             (Legal values:  NONE,  LOBBYONLY,  ALL) */
        spectatorType: "NONE" | "LOBBYONLY" | "ALL";
        /** Checks if allowed participants are enough to make full teams. */
        enoughPlayers: boolean;
    }
}

namespace tournamentStubV5 {
    /**
     * TournamentCodeV5DTO data object, automatically generated.
     */
    export interface TournamentCodeV5DTO {
        /** The tournament code. */
        code: string;
        /** The spectator mode for the tournament code game. */
        spectators: string;
        /** The lobby name for the tournament code game. */
        lobbyName: string;
        /** The metadata for tournament code. */
        metaData: string;
        /** The password for the tournament code game. */
        password: string;
        /** The team size for the tournament code game. */
        teamSize: int;
        /** The provider's ID. */
        providerId: int;
        /** The pick mode for tournament code game. */
        pickType: string;
        /** The tournament's ID. */
        tournamentId: int;
        /** The tournament code's ID. */
        id: int;
        /** The tournament code's region.
             (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR,  KR) */
        region: "BR" | "EUNE" | "EUW" | "JP" | "LAN" | "LAS" | "NA" | "OCE" | "PBE" | "RU" | "TR" | "KR";
        /** The game map for the tournament code game */
        map: string;
        /** The puuids of the participants (Encrypted) */
        participants: string[];
    }
}

namespace tournamentStubV5 {
    /**
     * LobbyEventV5DTOWrapper data object, automatically generated.
     */
    export interface LobbyEventV5DTOWrapper {
        eventList: tournamentStubV5.LobbyEventV5DTO[];
    }
}

namespace tournamentStubV5 {
    /**
     * LobbyEventV5DTO data object, automatically generated.
     */
    export interface LobbyEventV5DTO {
        /** Timestamp from the event */
        timestamp: string;
        /** The type of event that was triggered */
        eventType: string;
        /** The puuid that triggered the event (Encrypted) */
        puuid: string;
    }
}

namespace tournamentStubV5 {
    /**
     * ProviderRegistrationParametersV5 data object, automatically generated.
     */
    export interface ProviderRegistrationParametersV5 {
        /** The region in which the provider will be running tournaments.
             (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR,  KR) */
        region: "BR" | "EUNE" | "EUW" | "JP" | "LAN" | "LAS" | "NA" | "OCE" | "PBE" | "RU" | "TR" | "KR";
        /** The provider's callback URL to which tournament game results in this region should be posted. The URL must be well-formed, use the http or https protocol, and use the default port for the protocol (http URLs must use port 80, https URLs must use port 443). */
        url: string;
    }
}

namespace tournamentStubV5 {
    /**
     * TournamentRegistrationParametersV5 data object, automatically generated.
     */
    export interface TournamentRegistrationParametersV5 {
        /** The provider ID to specify the regional registered provider data to associate this tournament. */
        providerId: int;
        /** The optional name of the tournament. */
        name?: string | null;
    }
}

namespace tournamentV5 {
    /**
     * TournamentCodeParametersV5 data object, automatically generated.
     */
    export interface TournamentCodeParametersV5 {
        /** Optional list of encrypted puuids in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future. */
        allowedParticipants?: string[] | null;
        /** Optional string that may contain any data in any format, if specified at all. Used to denote any custom information about the game. */
        metadata?: string | null;
        /** The team size of the game. Valid values are 1-5. */
        teamSize: int;
        /** The pick type of the game.
             (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT) */
        pickType: "BLIND_PICK" | "DRAFT_MODE" | "ALL_RANDOM" | "TOURNAMENT_DRAFT";
        /** The map type of the game.
             (Legal values:  SUMMONERS_RIFT,  HOWLING_ABYSS) */
        mapType: "SUMMONERS_RIFT" | "HOWLING_ABYSS";
        /** The spectator type of the game.
             (Legal values:  NONE,  LOBBYONLY,  ALL) */
        spectatorType: "NONE" | "LOBBYONLY" | "ALL";
        /** Checks if allowed participants are enough to make full teams. */
        enoughPlayers: boolean;
    }
}

namespace tournamentV5 {
    /**
     * TournamentCodeV5DTO data object, automatically generated.
     */
    export interface TournamentCodeV5DTO {
        /** The tournament code. */
        code: string;
        /** The spectator mode for the tournament code game. */
        spectators: string;
        /** The lobby name for the tournament code game. */
        lobbyName: string;
        /** The metadata for tournament code. */
        metaData: string;
        /** The password for the tournament code game. */
        password: string;
        /** The team size for the tournament code game. */
        teamSize: int;
        /** The provider's ID. */
        providerId: int;
        /** The pick mode for tournament code game. */
        pickType: string;
        /** The tournament's ID. */
        tournamentId: int;
        /** The tournament code's ID. */
        id: int;
        /** The tournament code's region.
             (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR,  KR,  PH,  SG,  TH,  TW,  VN) */
        region: "BR" | "EUNE" | "EUW" | "JP" | "LAN" | "LAS" | "NA" | "OCE" | "PBE" | "RU" | "TR" | "KR" | "PH" | "SG" | "TH" | "TW" | "VN";
        /** The game map for the tournament code game */
        map: string;
        /** The puuids of the participants (Encrypted) */
        participants: string[];
    }
}

namespace tournamentV5 {
    /**
     * TournamentCodeUpdateParametersV5 data object, automatically generated.
     */
    export interface TournamentCodeUpdateParametersV5 {
        /** Optional list of encrypted puuids in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future. */
        allowedParticipants?: string[] | null;
        /** The pick type
             (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT) */
        pickType: "BLIND_PICK" | "DRAFT_MODE" | "ALL_RANDOM" | "TOURNAMENT_DRAFT";
        /** The map type
             (Legal values:  SUMMONERS_RIFT,  HOWLING_ABYSS) */
        mapType: "SUMMONERS_RIFT" | "HOWLING_ABYSS";
        /** The spectator type
             (Legal values:  NONE,  LOBBYONLY,  ALL) */
        spectatorType: "NONE" | "LOBBYONLY" | "ALL";
    }
}

namespace tournamentV5 {
    /**
     * TournamentGamesV5 data object, automatically generated.
     */
    export interface TournamentGamesV5 {
        winningTeam: tournamentV5.TournamentTeamV5[];
        losingTeam: tournamentV5.TournamentTeamV5[];
        /** Tournament Code */
        shortCode: string;
        /** Metadata for the TournamentCode */
        metaData?: string | null;
        gameId: long;
        gameName: string;
        gameType: string;
        /** Game Map ID */
        gameMap: int;
        gameMode: string;
        /** Region of the game */
        region: string;
    }
}

namespace tournamentV5 {
    /**
     * TournamentTeamV5 data object, automatically generated.
     */
    export interface TournamentTeamV5 {
        /** Player Unique UUID (Encrypted) */
        puuid: string;
    }
}

namespace tournamentV5 {
    /**
     * LobbyEventV5DTOWrapper data object, automatically generated.
     */
    export interface LobbyEventV5DTOWrapper {
        eventList: tournamentV5.LobbyEventV5DTO[];
    }
}

namespace tournamentV5 {
    /**
     * LobbyEventV5DTO data object, automatically generated.
     */
    export interface LobbyEventV5DTO {
        /** Timestamp from the event */
        timestamp: string;
        /** The type of event that was triggered */
        eventType: string;
        /** The puuid that triggered the event (Encrypted) */
        puuid: string;
    }
}

namespace tournamentV5 {
    /**
     * ProviderRegistrationParametersV5 data object, automatically generated.
     */
    export interface ProviderRegistrationParametersV5 {
        /** The region in which the provider will be running tournaments.
             (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR,  KR,  PH,  SG,  TH,  TW,  VN) */
        region: "BR" | "EUNE" | "EUW" | "JP" | "LAN" | "LAS" | "NA" | "OCE" | "PBE" | "RU" | "TR" | "KR" | "PH" | "SG" | "TH" | "TW" | "VN";
        /** The provider's callback URL to which tournament game results in this region should be posted. The URL must be well-formed, use the http or https protocol, and use the default port for the protocol (http URLs must use port 80, https URLs must use port 443). */
        url: string;
    }
}

namespace tournamentV5 {
    /**
     * TournamentRegistrationParametersV5 data object, automatically generated.
     */
    export interface TournamentRegistrationParametersV5 {
        /** The provider ID to specify the regional registered provider data to associate this tournament. */
        providerId: int;
        /** The optional name of the tournament. */
        name?: string | null;
    }
}

namespace valContentV1 {
    /**
     * ContentDto data object, automatically generated.
     */
    export interface ContentDto {
        version: string;
        characters: valContentV1.ContentItemDto[];
        maps: valContentV1.ContentItemDto[];
        chromas: valContentV1.ContentItemDto[];
        skins: valContentV1.ContentItemDto[];
        skinLevels: valContentV1.ContentItemDto[];
        equips: valContentV1.ContentItemDto[];
        gameModes: valContentV1.ContentItemDto[];
        sprays: valContentV1.ContentItemDto[];
        sprayLevels: valContentV1.ContentItemDto[];
        charms: valContentV1.ContentItemDto[];
        charmLevels: valContentV1.ContentItemDto[];
        playerCards: valContentV1.ContentItemDto[];
        playerTitles: valContentV1.ContentItemDto[];
        acts: valContentV1.ActDto[];
        ceremonies?: valContentV1.ContentItemDto[] | null;
        /** Unknown type, this is a placeholder subject to change. */
        totems?: string[] | null;
    }
}

namespace valContentV1 {
    /**
     * ContentItemDto data object, automatically generated.
     */
    export interface ContentItemDto {
        name: string;
        /** This field is excluded from the response when a locale is set */
        localizedNames?: valContentV1.LocalizedNamesDto | null;
        id: string;
        assetName: string;
        /** This field is only included for maps and game modes. These values are used in the match response. */
        assetPath?: string | null;
    }
}

namespace valContentV1 {
    /**
     * LocalizedNamesDto data object, automatically generated.
     */
    export interface LocalizedNamesDto {
        "ar-AE": string;
        "de-DE": string;
        "en-GB?": string | null;
        "en-US": string;
        "es-ES": string;
        "es-MX": string;
        "fr-FR": string;
        "id-ID": string;
        "it-IT": string;
        "ja-JP": string;
        "ko-KR": string;
        "pl-PL": string;
        "pt-BR": string;
        "ru-RU": string;
        "th-TH": string;
        "tr-TR": string;
        "vi-VN": string;
        "zh-CN": string;
        "zh-TW": string;
    }
}

namespace valContentV1 {
    /**
     * ActDto data object, automatically generated.
     */
    export interface ActDto {
        name: string;
        /** This field is excluded from the response when a locale is set */
        localizedNames?: valContentV1.LocalizedNamesDto | null;
        id: string;
        isActive: boolean;
        parentId?: string | null;
        type?: string | null;
    }
}

namespace valMatchV1 {
    /**
     * MatchDto data object, automatically generated.
     */
    export interface MatchDto {
        matchInfo: valMatchV1.MatchInfoDto;
        players: valMatchV1.PlayerDto[];
        coaches: valMatchV1.CoachDto[];
        teams: valMatchV1.TeamDto[];
        roundResults: valMatchV1.RoundResultDto[];
    }
}

namespace valMatchV1 {
    /**
     * MatchInfoDto data object, automatically generated.
     */
    export interface MatchInfoDto {
        matchId: string;
        mapId: string;
        gameLengthMillis: int;
        gameStartMillis: long;
        provisioningFlowId: string;
        isCompleted: boolean;
        customGameName: string;
        queueId: string;
        gameMode: string;
        isRanked: boolean;
        seasonId: string;
    }
}

namespace valMatchV1 {
    /**
     * PlayerDto data object, automatically generated.
     */
    export interface PlayerDto {
        puuid: string;
        gameName: string;
        tagLine: string;
        teamId: string;
        partyId: string;
        characterId: string;
        stats: valMatchV1.PlayerStatsDto;
        competitiveTier: int;
        playerCard: string;
        playerTitle: string;
    }
}

namespace valMatchV1 {
    /**
     * PlayerStatsDto data object, automatically generated.
     */
    export interface PlayerStatsDto {
        score: int;
        roundsPlayed: int;
        kills: int;
        deaths: int;
        assists: int;
        playtimeMillis: int;
        abilityCasts: valMatchV1.AbilityCastsDto;
    }
}

namespace valMatchV1 {
    /**
     * AbilityCastsDto data object, automatically generated.
     */
    export interface AbilityCastsDto {
        grenadeCasts: int;
        ability1Casts: int;
        ability2Casts: int;
        ultimateCasts: int;
    }
}

namespace valMatchV1 {
    /**
     * CoachDto data object, automatically generated.
     */
    export interface CoachDto {
        puuid: string;
        teamId: string;
    }
}

namespace valMatchV1 {
    /**
     * TeamDto data object, automatically generated.
     */
    export interface TeamDto {
        /** This is an arbitrary string. Red and Blue in bomb modes. The puuid of the player in deathmatch. */
        teamId: string;
        won: boolean;
        roundsPlayed: int;
        roundsWon: int;
        /** Team points scored. Number of kills in deathmatch. */
        numPoints: int;
    }
}

namespace valMatchV1 {
    /**
     * RoundResultDto data object, automatically generated.
     */
    export interface RoundResultDto {
        roundNum: int;
        roundResult: string;
        roundCeremony: string;
        winningTeam: string;
        /** PUUID of player */
        bombPlanter: string;
        /** PUUID of player */
        bombDefuser: string;
        plantRoundTime: int;
        plantPlayerLocations: valMatchV1.PlayerLocationsDto[];
        plantLocation: valMatchV1.LocationDto;
        plantSite: string;
        defuseRoundTime: int;
        defusePlayerLocations: valMatchV1.PlayerLocationsDto[];
        defuseLocation: valMatchV1.LocationDto;
        playerStats: valMatchV1.PlayerRoundStatsDto[];
        roundResultCode: string;
    }
}

namespace valMatchV1 {
    /**
     * PlayerLocationsDto data object, automatically generated.
     */
    export interface PlayerLocationsDto {
        puuid: string;
        viewRadians: float;
        location: valMatchV1.LocationDto;
    }
}

namespace valMatchV1 {
    /**
     * LocationDto data object, automatically generated.
     */
    export interface LocationDto {
        x: int;
        y: int;
    }
}

namespace valMatchV1 {
    /**
     * PlayerRoundStatsDto data object, automatically generated.
     */
    export interface PlayerRoundStatsDto {
        puuid: string;
        kills: valMatchV1.KillDto[];
        damage: valMatchV1.DamageDto[];
        score: int;
        economy: valMatchV1.EconomyDto;
        ability: valMatchV1.AbilityDto;
    }
}

namespace valMatchV1 {
    /**
     * KillDto data object, automatically generated.
     */
    export interface KillDto {
        timeSinceGameStartMillis: int;
        timeSinceRoundStartMillis: int;
        /** PUUID */
        killer: string;
        /** PUUID */
        victim: string;
        victimLocation: valMatchV1.LocationDto;
        /** List of PUUIDs */
        assistants: string[];
        playerLocations: valMatchV1.PlayerLocationsDto[];
        finishingDamage: valMatchV1.FinishingDamageDto;
    }
}

namespace valMatchV1 {
    /**
     * FinishingDamageDto data object, automatically generated.
     */
    export interface FinishingDamageDto {
        damageType: string;
        damageItem: string;
        isSecondaryFireMode: boolean;
    }
}

namespace valMatchV1 {
    /**
     * DamageDto data object, automatically generated.
     */
    export interface DamageDto {
        /** PUUID */
        receiver: string;
        damage: int;
        legshots: int;
        bodyshots: int;
        headshots: int;
    }
}

namespace valMatchV1 {
    /**
     * EconomyDto data object, automatically generated.
     */
    export interface EconomyDto {
        loadoutValue: int;
        weapon: string;
        armor: string;
        remaining: int;
        spent: int;
    }
}

namespace valMatchV1 {
    /**
     * AbilityDto data object, automatically generated.
     */
    export interface AbilityDto {
        grenadeEffects: string;
        ability1Effects: string;
        ability2Effects: string;
        ultimateEffects: string;
    }
}

namespace valMatchV1 {
    /**
     * MatchlistDto data object, automatically generated.
     */
    export interface MatchlistDto {
        puuid: string;
        history: valMatchV1.MatchlistEntryDto[];
    }
}

namespace valMatchV1 {
    /**
     * MatchlistEntryDto data object, automatically generated.
     */
    export interface MatchlistEntryDto {
        matchId: string;
        gameStartTimeMillis: long;
        queueId: string;
    }
}

namespace valMatchV1 {
    /**
     * RecentMatchesDto data object, automatically generated.
     */
    export interface RecentMatchesDto {
        currentTime: long;
        /** A list of recent match ids. */
        matchIds: string[];
    }
}

namespace valRankedV1 {
    /**
     * LeaderboardDto data object, automatically generated.
     */
    export interface LeaderboardDto {
        /** The shard for the given leaderboard. */
        shard: string;
        /** The act id for the given leaderboard. Act ids can be found using the val-content API. */
        actId: string;
        /** The total number of players in the leaderboard. */
        totalPlayers: long;
        players: valRankedV1.PlayerDto[];
        immortalStartingPage?: long | null;
        immortalStartingIndex?: long | null;
        topTierRRThreshold?: long | null;
        tierDetails?: { [key: string]: valRankedV1.TierDetailDto } | null;
        startIndex?: long | null;
        query?: string | null;
    }
}

namespace valRankedV1 {
    /**
     * PlayerDto data object, automatically generated.
     */
    export interface PlayerDto {
        /** This field may be omitted if the player has been anonymized. */
        puuid?: string | null;
        /** This field may be omitted if the player has been anonymized. */
        gameName?: string | null;
        /** This field may be omitted if the player has been anonymized. */
        tagLine?: string | null;
        leaderboardRank: long;
        rankedRating: long;
        numberOfWins: long;
        competitiveTier?: long | null;
    }
}

namespace valStatusV1 {
    /**
     * PlatformDataDto data object, automatically generated.
     */
    export interface PlatformDataDto {
        id: string;
        name: string;
        locales: string[];
        maintenances: valStatusV1.StatusDto[];
        incidents: valStatusV1.StatusDto[];
    }
}

namespace valStatusV1 {
    /**
     * StatusDto data object, automatically generated.
     */
    export interface StatusDto {
        id: int;
        /** (Legal values:  scheduled,  in_progress,  complete) */
        maintenance_status: "scheduled" | "in_progress" | "complete";
        /** (Legal values:  info,  warning,  critical) */
        incident_severity: "info" | "warning" | "critical";
        titles: valStatusV1.ContentDto[];
        updates: valStatusV1.UpdateDto[];
        created_at: string;
        archive_at: string;
        updated_at: string;
        /** (Legal values: windows, macos, android, ios, ps4, xbone, switch) */
        platforms: "windows" | "macos" | "android" | "ios" | "ps4" | "xbone" | "switch"[];
    }
}

namespace valStatusV1 {
    /**
     * ContentDto data object, automatically generated.
     */
    export interface ContentDto {
        locale: string;
        content: string;
    }
}

namespace valStatusV1 {
    /**
     * UpdateDto data object, automatically generated.
     */
    export interface UpdateDto {
        id: int;
        author: string;
        publish: boolean;
        /** (Legal values: riotclient, riotstatus, game) */
        publish_locations: "riotclient" | "riotstatus" | "game"[];
        translations: valStatusV1.ContentDto[];
        created_at: string;
        updated_at: string;
    }
}

namespace matchV5 {
    /**
     * ParticipantChallenges data object, automatically generated.
     */
    export interface ParticipantChallenges {
        "12AssistStreakCount?": double | null;
        abilityUses?: double | null;
        acesBefore15Minutes?: double | null;
        alliedJungleMonsterKills?: double | null;
        baronBuffGoldAdvantageOverThreshold?: double | null;
        baronTakedowns?: double | null;
        blastConeOppositeOpponentCount?: double | null;
        bountyGold?: double | null;
        buffsStolen?: double | null;
        completeSupportQuestInTime?: double | null;
        controlWardsPlaced?: double | null;
        controlWardTimeCoverageInRiverOrEnemyHalf?: double | null;
        damagePerMinute?: double | null;
        damageTakenOnTeamPercentage?: double | null;
        dancedWithRiftHerald?: double | null;
        deathsByEnemyChamps?: double | null;
        dodgeSkillShotsSmallWindow?: double | null;
        doubleAces?: double | null;
        dragonTakedowns?: double | null;
        earliestBaron?: double | null;
        earliestDragonTakedown?: double | null;
        earliestElderDragon?: double | null;
        earlyLaningPhaseGoldExpAdvantage?: double | null;
        effectiveHealAndShielding?: double | null;
        elderDragonKillsWithOpposingSoul?: double | null;
        elderDragonMultikills?: double | null;
        enemyChampionImmobilizations?: double | null;
        enemyJungleMonsterKills?: double | null;
        epicMonsterKillsNearEnemyJungler?: double | null;
        epicMonsterKillsWithin30SecondsOfSpawn?: double | null;
        epicMonsterSteals?: double | null;
        epicMonsterStolenWithoutSmite?: double | null;
        fasterSupportQuestCompletion?: double | null;
        fastestLegendary?: double | null;
        firstTurretKilled?: double | null;
        firstTurretKilledTime?: double | null;
        flawlessAces?: double | null;
        fullTeamTakedown?: double | null;
        gameLength?: double | null;
        getTakedownsInAllLanesEarlyJungleAsLaner?: double | null;
        goldPerMinute?: double | null;
        hadAfkTeammate?: double | null;
        hadOpenNexus?: double | null;
        highestChampionDamage?: double | null;
        highestCrowdControlScore?: double | null;
        highestWardKills?: double | null;
        immobilizeAndKillWithAlly?: double | null;
        initialBuffCount?: double | null;
        initialCrabCount?: double | null;
        jungleCsBefore10Minutes?: double | null;
        junglerKillsEarlyJungle?: double | null;
        junglerTakedownsNearDamagedEpicMonster?: double | null;
        kda?: double | null;
        killAfterHiddenWithAlly?: double | null;
        killedChampTookFullTeamDamageSurvived?: double | null;
        killingSprees?: double | null;
        killParticipation?: double | null;
        killsNearEnemyTurret?: double | null;
        killsOnLanersEarlyJungleAsJungler?: double | null;
        killsOnOtherLanesEarlyJungleAsLaner?: double | null;
        killsOnRecentlyHealedByAramPack?: double | null;
        killsUnderOwnTurret?: double | null;
        killsWithHelpFromEpicMonster?: double | null;
        knockEnemyIntoTeamAndKill?: double | null;
        kTurretsDestroyedBeforePlatesFall?: double | null;
        landSkillShotsEarlyGame?: double | null;
        laneMinionsFirst10Minutes?: double | null;
        laningPhaseGoldExpAdvantage?: double | null;
        legendaryCount?: double | null;
        lostAnInhibitor?: double | null;
        maxCsAdvantageOnLaneOpponent?: double | null;
        maxKillDeficit?: double | null;
        maxLevelLeadLaneOpponent?: double | null;
        mejaisFullStackInTime?: double | null;
        moreEnemyJungleThanOpponent?: double | null;
        mostWardsDestroyedOneSweeper?: double | null;
        multiKillOneSpell?: double | null;
        multikills?: double | null;
        multikillsAfterAggressiveFlash?: double | null;
        multiTurretRiftHeraldCount?: double | null;
        mythicItemUsed?: double | null;
        outerTurretExecutesBefore10Minutes?: double | null;
        outnumberedKills?: double | null;
        outnumberedNexusKill?: double | null;
        perfectDragonSoulsTaken?: double | null;
        perfectGame?: double | null;
        pickKillWithAlly?: double | null;
        playedChampSelectPosition?: double | null;
        poroExplosions?: double | null;
        quickCleanse?: double | null;
        quickFirstTurret?: double | null;
        quickSoloKills?: double | null;
        riftHeraldTakedowns?: double | null;
        saveAllyFromDeath?: double | null;
        scuttleCrabKills?: double | null;
        shortestTimeToAceFromFirstTakedown?: double | null;
        skillshotsDodged?: double | null;
        skillshotsHit?: double | null;
        snowballsHit?: double | null;
        soloBaronKills?: double | null;
        soloKills?: double | null;
        soloTurretsLategame?: double | null;
        stealthWardsPlaced?: double | null;
        survivedSingleDigitHpCount?: double | null;
        survivedThreeImmobilizesInFight?: double | null;
        takedownOnFirstTurret?: double | null;
        takedowns?: double | null;
        takedownsAfterGainingLevelAdvantage?: double | null;
        takedownsBeforeJungleMinionSpawn?: double | null;
        takedownsFirst25Minutes?: double | null;
        takedownsFirstXMinutes?: double | null;
        takedownsInAlcove?: double | null;
        takedownsInEnemyFountain?: double | null;
        teamBaronKills?: double | null;
        teamDamagePercentage?: double | null;
        teamElderDragonKills?: double | null;
        teamRiftHeraldKills?: double | null;
        teleportTakedowns?: double | null;
        thirdInhibitorDestroyedTime?: double | null;
        threeWardsOneSweeperCount?: double | null;
        tookLargeDamageSurvived?: double | null;
        turretPlatesTaken?: double | null;
        turretsTakenWithRiftHerald?: double | null;
        turretTakedowns?: double | null;
        twentyMinionsIn3SecondsCount?: double | null;
        twoWardsOneSweeperCount?: int | null;
        unseenRecalls?: double | null;
        visionScoreAdvantageLaneOpponent?: double | null;
        visionScorePerMinute?: double | null;
        wardsGuarded?: double | null;
        wardTakedowns?: double | null;
        wardTakedownsBefore20M?: double | null;
        legendaryItemUsed?: int[] | null;
    }
}

namespace matchV5 {
    /**
     * ParticipantMissions data object, automatically generated.
     */
    export interface ParticipantMissions {
        PlayerScore0: int;
        PlayerScore1: int;
        PlayerScore10: int;
        PlayerScore11: int;
        PlayerScore2: int;
        PlayerScore3: int;
        PlayerScore4: int;
        PlayerScore5: int;
        PlayerScore6: int;
        PlayerScore7: int;
        PlayerScore8: int;
        PlayerScore9: int;
    }
}

namespace matchV5 {
    /**
     * MatchTimelineInfoFrameEvent data object, automatically generated.
     */
    export interface MatchTimelineInfoFrameEvent {
        realTimestamp?: int | null;
        timestamp: int;
        /** Timeline event type.
(Known legal values: ASCENDED_EVENT, BUILDING_KILL, CAPTURE_POINT, CHAMPION_KILL, CHAMPION_SPECIAL_KILL, CHAMPION_TRANSFORM, DRAGON_SOUL_GIVEN, ELITE_MONSTER_KILL, GAME_END, ITEM_DESTROYED, ITEM_PURCHASED, ITEM_SOLD, ITEM_UNDO, LEVEL_UP, OBJECTIVE_BOUNTY_FINISH, OBJECTIVE_BOUNTY_PRESTART, PAUSE_END, PAUSE_START, SKILL_LEVEL_UP, TURRET_PLATE_DESTROYED, WARD_KILL, WARD_PLACED) */
        type: "ASCENDED_EVENT" | "BUILDING_KILL" | "CAPTURE_POINT" | "CHAMPION_KILL" | "CHAMPION_SPECIAL_KILL" | "CHAMPION_TRANSFORM" | "DRAGON_SOUL_GIVEN" | "ELITE_MONSTER_KILL" | "GAME_END" | "ITEM_DESTROYED" | "ITEM_PURCHASED" | "ITEM_SOLD" | "ITEM_UNDO" | "LEVEL_UP" | "OBJECTIVE_BOUNTY_FINISH" | "OBJECTIVE_BOUNTY_PRESTART" | "PAUSE_END" | "PAUSE_START" | "SKILL_LEVEL_UP" | "TURRET_PLATE_DESTROYED" | "WARD_KILL" | "WARD_PLACED";
        itemId?: int | null;
        participantId?: int | null;
        levelUpType?: string | null;
        skillSlot?: int | null;
        creatorId?: int | null;
        wardType?: string | null;
        level?: int | null;
        assistingParticipantIds?: int[] | null;
        bounty?: int | null;
        killStreakLength?: int | null;
        killerId?: int | null;
        position?: matchV5.MatchTimelinePosition | null;
        victimDamageDealt?: matchV5.MatchTimelineInfoFrameEventVictimDamageDealt[] | null;
        victimDamageReceived?: matchV5.MatchTimelineInfoFrameEventVictimDamageDealt[] | null;
        victimId?: int | null;
        killType?: string | null;
        laneType?: string | null;
        teamId?: int | null;
        multiKillLength?: int | null;
        killerTeamId?: int | null;
        monsterType?: string | null;
        monsterSubType?: string | null;
        buildingType?: string | null;
        towerType?: string | null;
        afterId?: int | null;
        beforeId?: int | null;
        goldGain?: int | null;
        gameId?: int | null;
        winningTeam?: int | null;
        transformType?: string | null;
        name?: string | null;
        shutdownBounty?: int | null;
        actualStartTime?: int | null;
    }
}

namespace matchV5 {
    /**
     * MatchTimelineInfoFrameParticipantFrameChampionStats data object, automatically generated.
     */
    export interface MatchTimelineInfoFrameParticipantFrameChampionStats {
        abilityHaste?: int | null;
        abilityPower: int;
        armor: int;
        armorPen: int;
        armorPenPercent: int;
        attackDamage: int;
        attackSpeed: int;
        bonusArmorPenPercent: int;
        bonusMagicPenPercent: int;
        ccReduction: int;
        cooldownReduction: int;
        health: int;
        healthMax: int;
        healthRegen: int;
        lifesteal: int;
        magicPen: int;
        magicPenPercent: int;
        magicResist: int;
        movementSpeed: int;
        omnivamp?: int | null;
        physicalVamp?: int | null;
        power: int;
        powerMax: int;
        powerRegen: int;
        spellVamp: int;
    }
}

namespace matchV5 {
    /**
     * MatchTimelineInfoFrameParticipantFrameDamageStats data object, automatically generated.
     */
    export interface MatchTimelineInfoFrameParticipantFrameDamageStats {
        magicDamageDone: int;
        magicDamageDoneToChampions: int;
        magicDamageTaken: int;
        physicalDamageDone: int;
        physicalDamageDoneToChampions: int;
        physicalDamageTaken: int;
        totalDamageDone: int;
        totalDamageDoneToChampions: int;
        totalDamageTaken: int;
        trueDamageDone: int;
        trueDamageDoneToChampions: int;
        trueDamageTaken: int;
    }
}

namespace matchV5 {
    /**
     * MatchTimelinePosition data object, automatically generated.
     */
    export interface MatchTimelinePosition {
        x: int;
        y: int;
    }
}

namespace matchV5 {
    /**
     * MatchTimelineInfoFrameParticipantFrame data object, automatically generated.
     */
    export interface MatchTimelineInfoFrameParticipantFrame {
        championStats: matchV5.MatchTimelineInfoFrameParticipantFrameChampionStats;
        currentGold: int;
        damageStats: matchV5.MatchTimelineInfoFrameParticipantFrameDamageStats;
        goldPerSecond: int;
        jungleMinionsKilled: int;
        level: int;
        minionsKilled: int;
        participantId: int;
        position: matchV5.MatchTimelinePosition;
        timeEnemySpentControlled: int;
        totalGold: int;
        xp: int;
    }
}

namespace matchV5 {
    /**
     * MatchTimelineInfoFrameParticipantFrames data object, automatically generated.
     */
    export interface MatchTimelineInfoFrameParticipantFrames {
        "1": matchV5.MatchTimelineInfoFrameParticipantFrame;
        "2": matchV5.MatchTimelineInfoFrameParticipantFrame;
        "3": matchV5.MatchTimelineInfoFrameParticipantFrame;
        "4": matchV5.MatchTimelineInfoFrameParticipantFrame;
        "5": matchV5.MatchTimelineInfoFrameParticipantFrame;
        "6": matchV5.MatchTimelineInfoFrameParticipantFrame;
        "7": matchV5.MatchTimelineInfoFrameParticipantFrame;
        "8": matchV5.MatchTimelineInfoFrameParticipantFrame;
        /** Possibly null for the Arena 2v2v2v2 (`CHERRY`) game mode. */
        "9?": matchV5.MatchTimelineInfoFrameParticipantFrame | null;
        /** Possibly null for the Arena 2v2v2v2 (`CHERRY`) game mode. */
        "10?": matchV5.MatchTimelineInfoFrameParticipantFrame | null;
    }
}

namespace matchV5 {
    /**
     * MatchTimelineInfoFrame data object, automatically generated.
     */
    export interface MatchTimelineInfoFrame {
        events: matchV5.MatchTimelineInfoFrameEvent[];
        participantFrames?: matchV5.MatchTimelineInfoFrameParticipantFrames | null;
        timestamp: int;
    }
}

namespace matchV5 {
    /**
     * MatchTimelineInfoFrameEventVictimDamageDealt data object, automatically generated.
     */
    export interface MatchTimelineInfoFrameEventVictimDamageDealt {
        basic: boolean;
        magicDamage: int;
        name: string;
        participantId: int;
        physicalDamage: int;
        spellName: string;
        spellSlot: int;
        trueDamage: int;
        type: string;
    }
}

namespace matchV5 {
    /**
     * MatchTimelineInfoParticipant data object, automatically generated.
     */
    export interface MatchTimelineInfoParticipant {
        participantId: int;
        puuid: string;
    }
}

namespace matchV5 {
    /**
     * MatchTimelineInfo data object, automatically generated.
     */
    export interface MatchTimelineInfo {
        frameInterval: int;
        frames: matchV5.MatchTimelineInfoFrame[];
        gameId?: int | null;
        participants?: matchV5.MatchTimelineInfoParticipant[] | null;
        endOfGameResult?: string | null;
    }
}

namespace valRankedV1 {
    /**
     * TierDetailDto data object, automatically generated.
     */
    export interface TierDetailDto {
        rankedRatingThreshold: long;
        startingPage: long;
        startingIndex: long;
    }
}

namespace tftMatchV1 {
    /**
     * ParticipantMissionsDto data object, automatically generated.
     */
    export interface ParticipantMissionsDto {
        Assists: int;
        DamageDealt: int;
        DamageDealtToObjectives: int;
        DamageDealtToTurrets: int;
        DamageTaken: int;
        DoubleKills: int;
        GoldEarned: int;
        GoldSpent: int;
        InhibitorsDestroyed: int;
        Kills: int;
        LargestKillingSpree: int;
        LargestMultiKill: int;
        MagicDamageDealt: int;
        MagicDamageDealtToChampions: int;
        NeutralMinionsKilledTeamJungle: int;
        PhysicalDamageDealt: int;
        PhysicalDamageTaken: int;
        PlayerScore0: int;
        PlayerScore1: int;
        PlayerScore2: int;
        PlayerScore3: int;
        PlayerScore4: int;
        PlayerScore5: int;
        PlayerScore6: int;
        PlayerScore9: int;
        PlayerScore10: int;
        PlayerScore11: int;
        QuadraKills: int;
        Spell1Casts: int;
        Spell2Casts: int;
        Spell3Casts: int;
        Spell4Casts: int;
        SummonerSpell1Casts: int;
        TimeCCOthers: int;
        TotalMinionsKilled: int;
        TrueDamageDealtToChampions: int;
        UnrealKills: int;
        VisionScore: int;
        WardsKilled: int;
        Deaths?: int | null;
        KillingSprees?: int | null;
        MagicDamageTaken?: int | null;
        PentaKills?: int | null;
        PhysicalDamageDealtToChampions?: int | null;
        TotalDamageDealtToChampions?: int | null;
        TripleKills?: int | null;
        TrueDamageDealt?: int | null;
        TrueDamageTaken?: int | null;
    }
}
