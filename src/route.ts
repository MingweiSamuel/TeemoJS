///////////////////////////////////////////////
//                                           //
//                     !                     //
//   This file is automatically generated!   //
//           Do not directly edit!           //
//                                           //
///////////////////////////////////////////////

// http://www.mingweisamuel.com/riotapi-schema/tool/
// Version 50e0dd62c27c4cbb1b353fc311529f937c279806

/** Regional routing values for `tftMatchV1`, `lorRankedV1`, and `AMERICAS` for league endpoints. */
enum RegionalRoute {
    /**
     * North and South America.
     *
     * `1` (riotapi-schema ID/repr)
     */
    AMERICAS = 1,

    /**
     * Asia, used for LoL matches (`match-v5`) and TFT matches (`tft-match-v1`).
     *
     * `2` (riotapi-schema ID/repr)
     */
    ASIA = 2,

    /**
     * Europe.
     *
     * `3` (riotapi-schema ID/repr)
     */
    EUROPE = 3,

    /**
     * South East Asia, used for LoR, LoL matches (`match-v5`), and TFT matches (`tft-match-v1`).
     *
     * `4` (riotapi-schema ID/repr)
     */
    SEA = 4,

    /**
     * Asia-Pacific, deprecated, for some old matches in `lor-match-v1`.
     *
     * `10` (riotapi-schema ID/repr)
     *
     * @deprecated
     */
    APAC = 10,

    /**
     * Special esports platform for `account-v1`. Do not confuse with the `esports` Valorant platform route.
     *
     * `11` (riotapi-schema ID/repr)
     */
    ESPORTS = 11,

}

/** Platform routing values for LoL, TFT. */
enum PlatformRoute {
    /**
     * Brazil.
     *
     * `16` (riotapi-schema ID/repr)
     */
    BR1 = 16,

    /**
     * Europe, Northeast.
     *
     * `17` (riotapi-schema ID/repr)
     */
    EUN1 = 17,

    /**
     * Europe, West.
     *
     * `18` (riotapi-schema ID/repr)
     */
    EUW1 = 18,

    /**
     * Japan.
     *
     * `19` (riotapi-schema ID/repr)
     */
    JP1 = 19,

    /**
     * Korea.
     *
     * `20` (riotapi-schema ID/repr)
     */
    KR = 20,

    /**
     * Latin America, North.
     *
     * `21` (riotapi-schema ID/repr)
     */
    LA1 = 21,

    /**
     * Latin America, South.
     *
     * `22` (riotapi-schema ID/repr)
     */
    LA2 = 22,

    /**
     * North America.
     *
     * `23` (riotapi-schema ID/repr)
     */
    NA1 = 23,

    /**
     * Oceania.
     *
     * `24` (riotapi-schema ID/repr)
     */
    OC1 = 24,

    /**
     * Philippines
     *
     * `32` (riotapi-schema ID/repr)
     */
    PH2 = 32,

    /**
     * Russia
     *
     * `25` (riotapi-schema ID/repr)
     */
    RU = 25,

    /**
     * Singapore
     *
     * `33` (riotapi-schema ID/repr)
     */
    SG2 = 33,

    /**
     * Thailand
     *
     * `34` (riotapi-schema ID/repr)
     */
    TH2 = 34,

    /**
     * Turkey
     *
     * `26` (riotapi-schema ID/repr)
     */
    TR1 = 26,

    /**
     * Taiwan
     *
     * `35` (riotapi-schema ID/repr)
     */
    TW2 = 35,

    /**
     * Vietnam
     *
     * `36` (riotapi-schema ID/repr)
     */
    VN2 = 36,

    /**
     * Public Beta Environment, special beta testing platform. Located in North America.
     *
     * `31` (riotapi-schema ID/repr)
     */
    PBE1 = 31,

}

/** Valorant platform routing values. */
enum ValPlatformRoute {
    /**
     * Asia-Pacific.
     *
     * `64` (riotapi-schema ID/repr)
     */
    AP = 64,

    /**
     * Brazil.
     *
     * `65` (riotapi-schema ID/repr)
     */
    BR = 65,

    /**
     * Europe.
     *
     * `66` (riotapi-schema ID/repr)
     */
    EU = 66,

    /**
     * Korea.
     *
     * `70` (riotapi-schema ID/repr)
     */
    KR = 70,

    /**
     * Latin America.
     *
     * `68` (riotapi-schema ID/repr)
     */
    LATAM = 68,

    /**
     * North America.
     *
     * `69` (riotapi-schema ID/repr)
     */
    NA = 69,

    /**
     * Special esports platform.
     *
     * `95` (riotapi-schema ID/repr)
     */
    ESPORTS = 95,

}

/** Combined routing enum. */
const AnyRoute = { ...RegionalRoute, ...PlatformRoute, ...ValPlatformRoute };
/** Combined routing type. */
type AnyRoute = RegionalRoute | PlatformRoute | ValPlatformRoute;

/** RegionalRoute static utility functions. */
namespace RegionalRoute {
    /**
     * Parse a `RegionalRoute` from a string, or throw if unparsable.
     * Case-insensitive. Only looks at the beginning two-letter prefix to
     * determine the `PlatformRoute`.
     * @param str String to parse.
     * @returns The parsed `RegionalRoute`.
     * @throws Error if `str` could not be parsed.
     */
    export function parse(str: string): RegionalRoute {
        switch (str.slice(0, 2).toUpperCase()) {
            case "AM": return RegionalRoute.AMERICAS;
            case "AS": return RegionalRoute.ASIA;
            case "EU": return RegionalRoute.EUROPE;
            case "SE": return RegionalRoute.SEA;
            case "AP": return RegionalRoute.APAC;
            case "ES": return RegionalRoute.ESPORTS;
        }
        throw new Error(`Failed to parse string as RegionalRoute: "${str}".`);
    }
}

/** PlatformRoute static utility functions. */
namespace PlatformRoute {
    const PLATFORM_TO_REGIONAL = {
        [PlatformRoute.BR1]: RegionalRoute.AMERICAS,
        [PlatformRoute.EUN1]: RegionalRoute.EUROPE,
        [PlatformRoute.EUW1]: RegionalRoute.EUROPE,
        [PlatformRoute.JP1]: RegionalRoute.ASIA,
        [PlatformRoute.KR]: RegionalRoute.ASIA,
        [PlatformRoute.LA1]: RegionalRoute.AMERICAS,
        [PlatformRoute.LA2]: RegionalRoute.AMERICAS,
        [PlatformRoute.NA1]: RegionalRoute.AMERICAS,
        [PlatformRoute.OC1]: RegionalRoute.SEA,
        [PlatformRoute.PH2]: RegionalRoute.SEA,
        [PlatformRoute.RU]: RegionalRoute.EUROPE,
        [PlatformRoute.SG2]: RegionalRoute.SEA,
        [PlatformRoute.TH2]: RegionalRoute.SEA,
        [PlatformRoute.TR1]: RegionalRoute.EUROPE,
        [PlatformRoute.TW2]: RegionalRoute.SEA,
        [PlatformRoute.VN2]: RegionalRoute.SEA,
        [PlatformRoute.PBE1]: RegionalRoute.AMERICAS,
    } as const;
    /**
     * Converts a `PlatformRoute` to the corresponding `RegionalRoute` for
     * `matchV5` and `tftMatchV1` endpoints, which require a `RegionalRoute`,
     * while other TFT/LoL endpoints require a `PlatformRoute`.
     * @param route `PlatformRoute` to be converted.
     * @returns A `RegionalRoute`.
     */
    export function toRegional(route: PlatformRoute): RegionalRoute {
        return PLATFORM_TO_REGIONAL[route];
    }

    const PLATFORM_TO_REGIONAL_LOR = {
        [PlatformRoute.BR1]: RegionalRoute.AMERICAS,
        [PlatformRoute.EUN1]: RegionalRoute.EUROPE,
        [PlatformRoute.EUW1]: RegionalRoute.EUROPE,
        [PlatformRoute.JP1]: RegionalRoute.ASIA,
        [PlatformRoute.KR]: RegionalRoute.ASIA,
        [PlatformRoute.LA1]: RegionalRoute.AMERICAS,
        [PlatformRoute.LA2]: RegionalRoute.AMERICAS,
        [PlatformRoute.NA1]: RegionalRoute.AMERICAS,
        [PlatformRoute.OC1]: RegionalRoute.SEA,
        [PlatformRoute.PH2]: RegionalRoute.SEA,
        [PlatformRoute.RU]: RegionalRoute.SEA,
        [PlatformRoute.SG2]: RegionalRoute.SEA,
        [PlatformRoute.TH2]: RegionalRoute.SEA,
        [PlatformRoute.TR1]: RegionalRoute.SEA,
        [PlatformRoute.TW2]: RegionalRoute.SEA,
        [PlatformRoute.VN2]: RegionalRoute.SEA,
        [PlatformRoute.PBE1]: RegionalRoute.AMERICAS,
    } as const;
    /**
     * Converts a `PlatformRoute` to the corresponding `RegionalRoute` for
     * Legends of Runterra (LoR) endpoints.
     * @param route `PlatformRoute` to be converted.
     * @returns A `RegionalRoute`.
     */
    export function toRegionalLor(route: PlatformRoute): RegionalRoute {
        return PLATFORM_TO_REGIONAL_LOR[route];
    }

    /**
     * Parse a `PlatformRoute` from a string, or throw if unparsable.
     * Case-insensitive. Only looks at the beginning three-letter
     * prefix to determine the `PlatformRoute`.
     * @param str String to parse.
     * @returns The parsed `PlatformRoute`.
     * @throws Error if `str` could not be parsed.
     */
    export function parse(str: string): PlatformRoute {
        switch (str.slice(0, 3).toUpperCase()) {
            case "BR":
            case "BR1": return PlatformRoute.BR1;
            case "EUN": return PlatformRoute.EUN1;
            case "EUW": return PlatformRoute.EUW1;
            case "JP":
            case "JP1": return PlatformRoute.JP1;
            case "KR": return PlatformRoute.KR;
            case "LAN":
            case "LA1": return PlatformRoute.LA1;
            case "LAS":
            case "LA2": return PlatformRoute.LA2;
            case "NA":
            case "NA1": return PlatformRoute.NA1;
            case "OCE":
            case "OC1": return PlatformRoute.OC1;
            case "PH":
            case "PH2": return PlatformRoute.PH2;
            case "RU": return PlatformRoute.RU;
            case "SG":
            case "SG2": return PlatformRoute.SG2;
            case "TH":
            case "TH2": return PlatformRoute.TH2;
            case "TR":
            case "TR1": return PlatformRoute.TR1;
            case "TW":
            case "TW2": return PlatformRoute.TW2;
            case "VN":
            case "VN2": return PlatformRoute.VN2;
            case "PBE": return PlatformRoute.PBE1;
        }
        throw new Error(`Failed to parse string as PlatformRoute: "${str}".`);
    }
}

/** ValPlatformRoute static utility functions. */
namespace ValPlatformRoute {
    /**
     * Parse a `ValPlatformRoute` from a string, or throw if unparsable.
     * Case-insensitive. Only looks at the beginning two-letter prefix to
     * determine the `PlatformRoute`.
     * @param str String to parse.
     * @returns The parsed `ValPlatformRoute`.
     * @throws Error if `str` could not be parsed.
     */
    export function parse(str: string): ValPlatformRoute {
        switch (str.slice(0, 2).toUpperCase()) {
            case "AP": return ValPlatformRoute.AP;
            case "BR": return ValPlatformRoute.BR;
            case "EU": return ValPlatformRoute.EU;
            case "KR": return ValPlatformRoute.KR;
            case "LA": return ValPlatformRoute.LATAM;
            case "NA": return ValPlatformRoute.NA;
            case "ES": return ValPlatformRoute.ESPORTS;
        }
        throw new Error(`Failed to parse string as ValPlatformRoute: "${str}".`);
    }
}


Object.assign(module.exports, { RegionalRoute, PlatformRoute, ValPlatformRoute, AnyRoute });
