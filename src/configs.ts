///////////////////////////////////////////////
//                                           //
//                     !                     //
//   This file is automatically generated!   //
//           Do not directly edit!           //
//                                           //
///////////////////////////////////////////////

// http://www.mingweisamuel.com/riotapi-schema/tool/
// Version 50e0dd62c27c4cbb1b353fc311529f937c279806

const RiotApiConfig = {
    apiKeys: {
        default: null,
    },
    distFactor: 1.0,
    retries: 3,
    origin: "https://{}.api.riotgames.com",
    defaultBuckets: [
        {
            timespan: 1000,
            limit: 1,
            bins: 1,
            binFactor: 1,
            overhead: 0,
        },
    ],
    rateLimitTypeApplication: {
        name: "application",
        headerLimit: "x-app-rate-limit",
        headerCount: "x-app-rate-limit-count",
    },
    rateLimitTypeMethod: {
        name: "method",
        headerLimit: "x-method-rate-limit",
        headerCount: "x-method-rate-limit-count",
    },
    maxConcurrent: 500,
    headerLimitType: "x-rate-limit-type",
    headerRetryAfter: "retry-after",
    bucketsConfig: {},
    endpoints: {
        accountV1: {
            /**
             * Get account by puuid
             */
            getByPuuid: {
                path: "/riot/account/v1/accounts/by-puuid/{puuid}",
            } as ReqSpec<accountV1.AccountDto, RegionalRoute.AMERICAS | RegionalRoute.ASIA | RegionalRoute.ESPORTS | RegionalRoute.EUROPE, { puuid: string } | [ string ], {}, undefined>,
            /**
             * Get account by riot id
             */
            getByRiotId: {
                path: "/riot/account/v1/accounts/by-riot-id/{gameName}/{tagLine}",
            } as ReqSpec<accountV1.AccountDto | null, RegionalRoute.AMERICAS | RegionalRoute.ASIA | RegionalRoute.ESPORTS | RegionalRoute.EUROPE, { gameName: string, tagLine: string } | [ string, string ], {}, undefined>,
            /**
             * Get account by access token
             */
            getByAccessToken: {
                path: "/riot/account/v1/accounts/me",
            } as ReqSpec<accountV1.AccountDto, RegionalRoute.AMERICAS | RegionalRoute.ASIA | RegionalRoute.ESPORTS | RegionalRoute.EUROPE, {} | [], {}, undefined>,
            /**
             * Get active shard for a player
             */
            getActiveShard: {
                path: "/riot/account/v1/active-shards/by-game/{game}/by-puuid/{puuid}",
            } as ReqSpec<accountV1.ActiveShardDto | null, RegionalRoute.AMERICAS | RegionalRoute.ASIA | RegionalRoute.ESPORTS | RegionalRoute.EUROPE, { game: "val" | "lor", puuid: string } | [ "val" | "lor", string ], {}, undefined>,
        },
        championMasteryV4: {
            /**
             * Get all champion mastery entries sorted by number of champion points descending.
             */
            getAllChampionMasteriesByPUUID: {
                path: "/lol/champion-mastery/v4/champion-masteries/by-puuid/{encryptedPUUID}",
            } as ReqSpec<championMasteryV4.ChampionMasteryDto[], Exclude<PlatformRoute, PlatformRoute.PBE1>, { encryptedPUUID: string } | [ string ], {}, undefined>,
            /**
             * Get a champion mastery by puuid and champion ID.
             */
            getChampionMasteryByPUUID: {
                path: "/lol/champion-mastery/v4/champion-masteries/by-puuid/{encryptedPUUID}/by-champion/{championId}",
            } as ReqSpec<championMasteryV4.ChampionMasteryDto, Exclude<PlatformRoute, PlatformRoute.PBE1>, { encryptedPUUID: string, championId: int } | [ string, int ], {}, undefined>,
            /**
             * Get specified number of top champion mastery entries sorted by number of champion points descending.
             */
            getTopChampionMasteriesByPUUID: {
                path: "/lol/champion-mastery/v4/champion-masteries/by-puuid/{encryptedPUUID}/top",
            } as ReqSpec<championMasteryV4.ChampionMasteryDto[], Exclude<PlatformRoute, PlatformRoute.PBE1>, { encryptedPUUID: string } | [ string ], { count?: int | null }, undefined>,
            /**
             * Get a player's total champion mastery score, which is the sum of individual champion mastery levels.
             */
            getChampionMasteryScoreByPUUID: {
                path: "/lol/champion-mastery/v4/scores/by-puuid/{encryptedPUUID}",
            } as ReqSpec<int, Exclude<PlatformRoute, PlatformRoute.PBE1>, { encryptedPUUID: string } | [ string ], {}, undefined>,
        },
        championV3: {
            /**
             * Returns champion rotations, including free-to-play and low-level free-to-play rotations (REST)
             */
            getChampionInfo: {
                path: "/lol/platform/v3/champion-rotations",
            } as ReqSpec<championV3.ChampionInfo, Exclude<PlatformRoute, PlatformRoute.PBE1>, {} | [], {}, undefined>,
        },
        clashV1: {
            /**
             * Get players by summoner ID.
             * ## Implementation Notes
             * This endpoint returns a list of active Clash players for a given summoner ID. If a summoner registers for multiple tournaments at the same time (e.g., Saturday and Sunday) then both registrations would appear in this list.
             */
            getPlayersBySummoner: {
                path: "/lol/clash/v1/players/by-summoner/{summonerId}",
            } as ReqSpec<clashV1.PlayerDto[], Exclude<PlatformRoute, PlatformRoute.PBE1>, { summonerId: string } | [ string ], {}, undefined>,
            /**
             * Get team by ID.
             */
            getTeamById: {
                path: "/lol/clash/v1/teams/{teamId}",
            } as ReqSpec<clashV1.TeamDto | null, Exclude<PlatformRoute, PlatformRoute.PBE1>, { teamId: string } | [ string ], {}, undefined>,
            /**
             * Get all active or upcoming tournaments.
             */
            getTournaments: {
                path: "/lol/clash/v1/tournaments",
            } as ReqSpec<clashV1.TournamentDto[], Exclude<PlatformRoute, PlatformRoute.PBE1>, {} | [], {}, undefined>,
            /**
             * Get tournament by team ID.
             */
            getTournamentByTeam: {
                path: "/lol/clash/v1/tournaments/by-team/{teamId}",
            } as ReqSpec<clashV1.TournamentDto | null, Exclude<PlatformRoute, PlatformRoute.PBE1>, { teamId: string } | [ string ], {}, undefined>,
            /**
             * Get tournament by ID.
             */
            getTournamentById: {
                path: "/lol/clash/v1/tournaments/{tournamentId}",
            } as ReqSpec<clashV1.TournamentDto | null, Exclude<PlatformRoute, PlatformRoute.PBE1>, { tournamentId: int } | [ int ], {}, undefined>,
        },
        leagueExpV4: {
            /**
             * Get all the league entries.
             */
            getLeagueEntries: {
                path: "/lol/league-exp/v4/entries/{queue}/{tier}/{division}",
            } as ReqSpec<leagueExpV4.LeagueEntryDTO[], Exclude<PlatformRoute, PlatformRoute.PBE1>, { queue: "RANKED_SOLO_5x5" | "RANKED_TFT" | "RANKED_FLEX_SR" | "RANKED_FLEX_TT", tier: "CHALLENGER" | "GRANDMASTER" | "MASTER" | "DIAMOND" | "EMERALD" | "PLATINUM" | "GOLD" | "SILVER" | "BRONZE" | "IRON", division: "I" | "II" | "III" | "IV" } | [ "RANKED_SOLO_5x5" | "RANKED_TFT" | "RANKED_FLEX_SR" | "RANKED_FLEX_TT", "CHALLENGER" | "GRANDMASTER" | "MASTER" | "DIAMOND" | "EMERALD" | "PLATINUM" | "GOLD" | "SILVER" | "BRONZE" | "IRON", "I" | "II" | "III" | "IV" ], { page?: int | null }, undefined>,
        },
        leagueV4: {
            /**
             * Get the challenger league for given queue.
             */
            getChallengerLeague: {
                path: "/lol/league/v4/challengerleagues/by-queue/{queue}",
            } as ReqSpec<leagueV4.LeagueListDTO, Exclude<PlatformRoute, PlatformRoute.PBE1>, { queue: "RANKED_SOLO_5x5" | "RANKED_FLEX_SR" | "RANKED_FLEX_TT" } | [ "RANKED_SOLO_5x5" | "RANKED_FLEX_SR" | "RANKED_FLEX_TT" ], {}, undefined>,
            /**
             * Get league entries in all queues for a given summoner ID.
             */
            getLeagueEntriesForSummoner: {
                path: "/lol/league/v4/entries/by-summoner/{encryptedSummonerId}",
            } as ReqSpec<leagueV4.LeagueEntryDTO[], Exclude<PlatformRoute, PlatformRoute.PBE1>, { encryptedSummonerId: string } | [ string ], {}, undefined>,
            /**
             * Get all the league entries.
             */
            getLeagueEntries: {
                path: "/lol/league/v4/entries/{queue}/{tier}/{division}",
            } as ReqSpec<leagueV4.LeagueEntryDTO[], Exclude<PlatformRoute, PlatformRoute.PBE1>, { queue: "RANKED_SOLO_5x5" | "RANKED_FLEX_SR" | "RANKED_FLEX_TT", tier: "DIAMOND" | "EMERALD" | "PLATINUM" | "GOLD" | "SILVER" | "BRONZE" | "IRON", division: "I" | "II" | "III" | "IV" } | [ "RANKED_SOLO_5x5" | "RANKED_FLEX_SR" | "RANKED_FLEX_TT", "DIAMOND" | "EMERALD" | "PLATINUM" | "GOLD" | "SILVER" | "BRONZE" | "IRON", "I" | "II" | "III" | "IV" ], { page?: int | null }, undefined>,
            /**
             * Get the grandmaster league of a specific queue.
             */
            getGrandmasterLeague: {
                path: "/lol/league/v4/grandmasterleagues/by-queue/{queue}",
            } as ReqSpec<leagueV4.LeagueListDTO, Exclude<PlatformRoute, PlatformRoute.PBE1>, { queue: "RANKED_SOLO_5x5" | "RANKED_FLEX_SR" | "RANKED_FLEX_TT" } | [ "RANKED_SOLO_5x5" | "RANKED_FLEX_SR" | "RANKED_FLEX_TT" ], {}, undefined>,
            /**
             * Get league with given ID, including inactive entries.
             */
            getLeagueById: {
                path: "/lol/league/v4/leagues/{leagueId}",
            } as ReqSpec<leagueV4.LeagueListDTO | null, Exclude<PlatformRoute, PlatformRoute.PBE1>, { leagueId: string } | [ string ], {}, undefined>,
            /**
             * Get the master league for given queue.
             */
            getMasterLeague: {
                path: "/lol/league/v4/masterleagues/by-queue/{queue}",
            } as ReqSpec<leagueV4.LeagueListDTO, Exclude<PlatformRoute, PlatformRoute.PBE1>, { queue: "RANKED_SOLO_5x5" | "RANKED_FLEX_SR" | "RANKED_FLEX_TT" } | [ "RANKED_SOLO_5x5" | "RANKED_FLEX_SR" | "RANKED_FLEX_TT" ], {}, undefined>,
        },
        lolChallengesV1: {
            /**
             * List of all basic challenge configuration information (includes all translations for names and descriptions)
             */
            getAllChallengeConfigs: {
                path: "/lol/challenges/v1/challenges/config",
            } as ReqSpec<lolChallengesV1.ChallengeConfigInfoDto[], PlatformRoute, {} | [], {}, undefined>,
            /**
             * Map of level to percentile of players who have achieved it - keys: ChallengeId -> Season -> Level -> percentile of players who achieved it
             */
            getAllChallengePercentiles: {
                path: "/lol/challenges/v1/challenges/percentiles",
            } as ReqSpec<{ [key: string]: { [key: string]: double } }, PlatformRoute, {} | [], {}, undefined>,
            /**
             * Get challenge configuration (REST)
             */
            getChallengeConfigs: {
                path: "/lol/challenges/v1/challenges/{challengeId}/config",
            } as ReqSpec<lolChallengesV1.ChallengeConfigInfoDto | null, PlatformRoute, { challengeId: long } | [ long ], {}, undefined>,
            /**
             * Return top players for each level. Level must be MASTER, GRANDMASTER or CHALLENGER.
             */
            getChallengeLeaderboards: {
                path: "/lol/challenges/v1/challenges/{challengeId}/leaderboards/by-level/{level}",
            } as ReqSpec<lolChallengesV1.ApexPlayerInfoDto[] | null, PlatformRoute, { challengeId: long, level: "NONE" | "IRON" | "BRONZE" | "SILVER" | "GOLD" | "PLATINUM" | "DIAMOND" | "MASTER" | "GRANDMASTER" | "CHALLENGER" | "HIGHEST_NOT_LEADERBOARD_ONLY" | "HIGHEST" | "LOWEST" } | [ long, "NONE" | "IRON" | "BRONZE" | "SILVER" | "GOLD" | "PLATINUM" | "DIAMOND" | "MASTER" | "GRANDMASTER" | "CHALLENGER" | "HIGHEST_NOT_LEADERBOARD_ONLY" | "HIGHEST" | "LOWEST" ], { limit?: int | null }, undefined>,
            /**
             * Map of level to percentile of players who have achieved it
             */
            getChallengePercentiles: {
                path: "/lol/challenges/v1/challenges/{challengeId}/percentiles",
            } as ReqSpec<{ [key: string]: double } | null, PlatformRoute, { challengeId: long } | [ long ], {}, undefined>,
            /**
             * Returns player information with list of all progressed challenges (REST)
             */
            getPlayerData: {
                path: "/lol/challenges/v1/player-data/{puuid}",
            } as ReqSpec<lolChallengesV1.PlayerInfoDto, PlatformRoute, { puuid: string } | [ string ], {}, undefined>,
        },
        lolStatusV4: {
            /**
             * Get League of Legends status for the given platform.
             */
            getPlatformData: {
                path: "/lol/status/v4/platform-data",
            } as ReqSpec<lolStatusV4.PlatformDataDto, Exclude<PlatformRoute, PlatformRoute.TW2>, {} | [], {}, undefined>,
        },
        lorDeckV1: {
            /**
             * Get a list of the calling user's decks.
             */
            getDecks: {
                path: "/lor/deck/v1/decks/me",
                apiKeyName: "lor",
            } as ReqSpec<lorDeckV1.DeckDto[], RegionalRoute.AMERICAS | RegionalRoute.EUROPE | RegionalRoute.SEA, {} | [], {}, undefined>,
            /**
             * Create a new deck for the calling user.
             */
            createDeck: {
                path: "/lor/deck/v1/decks/me",
                method: "post",
                apiKeyName: "lor",
            } as ReqSpec<string, RegionalRoute.AMERICAS | RegionalRoute.EUROPE | RegionalRoute.SEA, {} | [], {}, lorDeckV1.NewDeckDto>,
        },
        lorInventoryV1: {
            /**
             * Return a list of cards owned by the calling user.
             */
            getCards: {
                path: "/lor/inventory/v1/cards/me",
                apiKeyName: "lor",
            } as ReqSpec<lorInventoryV1.CardDto[], RegionalRoute.AMERICAS | RegionalRoute.EUROPE | RegionalRoute.SEA, {} | [], {}, undefined>,
        },
        lorMatchV1: {
            /**
             * Get a list of match ids by PUUID
             */
            getMatchIdsByPUUID: {
                path: "/lor/match/v1/matches/by-puuid/{puuid}/ids",
                apiKeyName: "lor",
            } as ReqSpec<string[], RegionalRoute.AMERICAS | RegionalRoute.APAC | RegionalRoute.EUROPE | RegionalRoute.SEA, { puuid: string } | [ string ], {}, undefined>,
            /**
             * Get match by id
             */
            getMatch: {
                path: "/lor/match/v1/matches/{matchId}",
                apiKeyName: "lor",
            } as ReqSpec<lorMatchV1.MatchDto, RegionalRoute.AMERICAS | RegionalRoute.APAC | RegionalRoute.EUROPE | RegionalRoute.SEA, { matchId: string } | [ string ], {}, undefined>,
        },
        lorRankedV1: {
            /**
             * Get the players in Master tier.
             */
            getLeaderboards: {
                path: "/lor/ranked/v1/leaderboards",
                apiKeyName: "lor",
            } as ReqSpec<lorRankedV1.LeaderboardDto, RegionalRoute.AMERICAS | RegionalRoute.EUROPE | RegionalRoute.SEA, {} | [], {}, undefined>,
        },
        lorStatusV1: {
            /**
             * Get Legends of Runeterra status for the given platform.
             */
            getPlatformData: {
                path: "/lor/status/v1/platform-data",
                apiKeyName: "lor",
            } as ReqSpec<lorStatusV1.PlatformDataDto, RegionalRoute.AMERICAS | RegionalRoute.EUROPE | RegionalRoute.SEA, {} | [], {}, undefined>,
        },
        matchV5: {
            /**
             * Get a list of match ids by puuid
             */
            getMatchIdsByPUUID: {
                path: "/lol/match/v5/matches/by-puuid/{puuid}/ids",
            } as ReqSpec<string[], RegionalRoute.AMERICAS | RegionalRoute.ASIA | RegionalRoute.EUROPE | RegionalRoute.SEA, { puuid: string } | [ string ], { startTime?: long | null, endTime?: long | null, queue?: int | null, type?: "ranked" | "normal" | "tourney" | "tutorial" | null, start?: int | null, count?: int | null }, undefined>,
            /**
             * Get a match by match id
             */
            getMatch: {
                path: "/lol/match/v5/matches/{matchId}",
            } as ReqSpec<matchV5.MatchDto | null, RegionalRoute.AMERICAS | RegionalRoute.ASIA | RegionalRoute.EUROPE | RegionalRoute.SEA, { matchId: string } | [ string ], {}, undefined>,
            /**
             * Get a match timeline by match id
             */
            getTimeline: {
                path: "/lol/match/v5/matches/{matchId}/timeline",
            } as ReqSpec<matchV5.MatchTimelineDto | null, RegionalRoute.AMERICAS | RegionalRoute.ASIA | RegionalRoute.EUROPE | RegionalRoute.SEA, { matchId: string } | [ string ], {}, undefined>,
        },
        spectatorTftV5: {
            /**
             * Get current game information for the given puuid.
             */
            getCurrentGameInfoByPuuid: {
                path: "/lol/spectator/tft/v5/active-games/by-puuid/{encryptedPUUID}",
                apiKeyName: "tft",
            } as ReqSpec<spectatorTftV5.CurrentGameInfo | null, Exclude<PlatformRoute, PlatformRoute.PBE1>, { encryptedPUUID: string } | [ string ], {}, undefined>,
            /**
             * Get list of featured games.
             */
            getFeaturedGames: {
                path: "/lol/spectator/tft/v5/featured-games",
                apiKeyName: "tft",
            } as ReqSpec<spectatorTftV5.FeaturedGames, Exclude<PlatformRoute, PlatformRoute.PBE1>, {} | [], {}, undefined>,
        },
        spectatorV5: {
            /**
             * Get current game information for the given puuid.
             */
            getCurrentGameInfoByPuuid: {
                path: "/lol/spectator/v5/active-games/by-summoner/{encryptedPUUID}",
            } as ReqSpec<spectatorV5.CurrentGameInfo | null, Exclude<PlatformRoute, PlatformRoute.PBE1>, { encryptedPUUID: string } | [ string ], {}, undefined>,
            /**
             * Get list of featured games.
             */
            getFeaturedGames: {
                path: "/lol/spectator/v5/featured-games",
            } as ReqSpec<spectatorV5.FeaturedGames, Exclude<PlatformRoute, PlatformRoute.PBE1>, {} | [], {}, undefined>,
        },
        summonerV4: {
            /**
             * Get a summoner by its RSO encrypted PUUID.
             */
            getByRSOPUUID: {
                path: "/fulfillment/v1/summoners/by-puuid/{rsoPUUID}",
            } as ReqSpec<summonerV4.SummonerDTO, Exclude<PlatformRoute, PlatformRoute.PBE1>, { rsoPUUID: string } | [ string ], {}, undefined>,
            /**
             * Get a summoner by account ID.
             */
            getByAccountId: {
                path: "/lol/summoner/v4/summoners/by-account/{encryptedAccountId}",
            } as ReqSpec<summonerV4.SummonerDTO, Exclude<PlatformRoute, PlatformRoute.PBE1>, { encryptedAccountId: string } | [ string ], {}, undefined>,
            /**
             * Get a summoner by summoner name.
             */
            getBySummonerName: {
                path: "/lol/summoner/v4/summoners/by-name/{summonerName}",
            } as ReqSpec<summonerV4.SummonerDTO | null, Exclude<PlatformRoute, PlatformRoute.PBE1>, { summonerName: string } | [ string ], {}, undefined>,
            /**
             * Get a summoner by PUUID.
             */
            getByPUUID: {
                path: "/lol/summoner/v4/summoners/by-puuid/{encryptedPUUID}",
            } as ReqSpec<summonerV4.SummonerDTO, Exclude<PlatformRoute, PlatformRoute.PBE1>, { encryptedPUUID: string } | [ string ], {}, undefined>,
            /**
             * Get a summoner by access token.
             */
            getByAccessToken: {
                path: "/lol/summoner/v4/summoners/me",
            } as ReqSpec<summonerV4.SummonerDTO, Exclude<PlatformRoute, PlatformRoute.PBE1>, {} | [], {}, undefined>,
            /**
             * Get a summoner by summoner ID.
             */
            getBySummonerId: {
                path: "/lol/summoner/v4/summoners/{encryptedSummonerId}",
            } as ReqSpec<summonerV4.SummonerDTO, Exclude<PlatformRoute, PlatformRoute.PBE1>, { encryptedSummonerId: string } | [ string ], {}, undefined>,
        },
        tftLeagueV1: {
            /**
             * Get the challenger league.
             */
            getChallengerLeague: {
                path: "/tft/league/v1/challenger",
                apiKeyName: "tft",
            } as ReqSpec<tftLeagueV1.LeagueListDTO, Exclude<PlatformRoute, PlatformRoute.PBE1>, {} | [], { queue?: "RANKED_TFT" | "RANKED_TFT_DOUBLE_UP" | null }, undefined>,
            /**
             * Get league entries for a given summoner ID.
             */
            getLeagueEntriesForSummoner: {
                path: "/tft/league/v1/entries/by-summoner/{summonerId}",
                apiKeyName: "tft",
            } as ReqSpec<tftLeagueV1.LeagueEntryDTO[], Exclude<PlatformRoute, PlatformRoute.PBE1>, { summonerId: string } | [ string ], {}, undefined>,
            /**
             * Get all the league entries.
             */
            getLeagueEntries: {
                path: "/tft/league/v1/entries/{tier}/{division}",
                apiKeyName: "tft",
            } as ReqSpec<tftLeagueV1.LeagueEntryDTO[], Exclude<PlatformRoute, PlatformRoute.PBE1>, { tier: "DIAMOND" | "EMERALD" | "PLATINUM" | "GOLD" | "SILVER" | "BRONZE" | "IRON", division: "I" | "II" | "III" | "IV" } | [ "DIAMOND" | "EMERALD" | "PLATINUM" | "GOLD" | "SILVER" | "BRONZE" | "IRON", "I" | "II" | "III" | "IV" ], { queue?: "RANKED_TFT" | "RANKED_TFT_DOUBLE_UP" | null, page?: int | null }, undefined>,
            /**
             * Get the grandmaster league.
             */
            getGrandmasterLeague: {
                path: "/tft/league/v1/grandmaster",
                apiKeyName: "tft",
            } as ReqSpec<tftLeagueV1.LeagueListDTO, Exclude<PlatformRoute, PlatformRoute.PBE1>, {} | [], { queue?: "RANKED_TFT" | "RANKED_TFT_DOUBLE_UP" | null }, undefined>,
            /**
             * Get league with given ID, including inactive entries.
             */
            getLeagueById: {
                path: "/tft/league/v1/leagues/{leagueId}",
                apiKeyName: "tft",
            } as ReqSpec<tftLeagueV1.LeagueListDTO | null, Exclude<PlatformRoute, PlatformRoute.PBE1>, { leagueId: string } | [ string ], {}, undefined>,
            /**
             * Get the master league.
             */
            getMasterLeague: {
                path: "/tft/league/v1/master",
                apiKeyName: "tft",
            } as ReqSpec<tftLeagueV1.LeagueListDTO, Exclude<PlatformRoute, PlatformRoute.PBE1>, {} | [], { queue?: "RANKED_TFT" | "RANKED_TFT_DOUBLE_UP" | null }, undefined>,
            /**
             * Get the top rated ladder for given queue
             */
            getTopRatedLadder: {
                path: "/tft/league/v1/rated-ladders/{queue}/top",
                apiKeyName: "tft",
            } as ReqSpec<tftLeagueV1.TopRatedLadderEntryDto[], Exclude<PlatformRoute, PlatformRoute.PBE1>, { queue: "RANKED_TFT_TURBO" } | [ "RANKED_TFT_TURBO" ], {}, undefined>,
        },
        tftMatchV1: {
            /**
             * Get a list of match ids by PUUID
             */
            getMatchIdsByPUUID: {
                path: "/tft/match/v1/matches/by-puuid/{puuid}/ids",
                apiKeyName: "tft",
            } as ReqSpec<string[], RegionalRoute.AMERICAS | RegionalRoute.ASIA | RegionalRoute.EUROPE | RegionalRoute.SEA, { puuid: string } | [ string ], { start?: int | null, endTime?: long | null, startTime?: long | null, count?: int | null }, undefined>,
            /**
             * Get a match by match id
             */
            getMatch: {
                path: "/tft/match/v1/matches/{matchId}",
                apiKeyName: "tft",
            } as ReqSpec<tftMatchV1.MatchDto | null, RegionalRoute.AMERICAS | RegionalRoute.ASIA | RegionalRoute.EUROPE | RegionalRoute.SEA, { matchId: string } | [ string ], {}, undefined>,
        },
        tftStatusV1: {
            /**
             * Get Teamfight Tactics status for the given platform.
             */
            getPlatformData: {
                path: "/tft/status/v1/platform-data",
                apiKeyName: "tft",
            } as ReqSpec<tftStatusV1.PlatformDataDto, PlatformRoute, {} | [], {}, undefined>,
        },
        tftSummonerV1: {
            /**
             * Get a summoner by account ID.
             */
            getByAccountId: {
                path: "/tft/summoner/v1/summoners/by-account/{encryptedAccountId}",
                apiKeyName: "tft",
            } as ReqSpec<tftSummonerV1.SummonerDTO, Exclude<PlatformRoute, PlatformRoute.PBE1>, { encryptedAccountId: string } | [ string ], {}, undefined>,
            /**
             * Get a summoner by summoner name.
             */
            getBySummonerName: {
                path: "/tft/summoner/v1/summoners/by-name/{summonerName}",
                apiKeyName: "tft",
            } as ReqSpec<tftSummonerV1.SummonerDTO | null, Exclude<PlatformRoute, PlatformRoute.PBE1>, { summonerName: string } | [ string ], {}, undefined>,
            /**
             * Get a summoner by PUUID.
             */
            getByPUUID: {
                path: "/tft/summoner/v1/summoners/by-puuid/{encryptedPUUID}",
                apiKeyName: "tft",
            } as ReqSpec<tftSummonerV1.SummonerDTO, Exclude<PlatformRoute, PlatformRoute.PBE1>, { encryptedPUUID: string } | [ string ], {}, undefined>,
            /**
             * Get a summoner by access token.
             */
            getByAccessToken: {
                path: "/tft/summoner/v1/summoners/me",
                apiKeyName: "tft",
            } as ReqSpec<tftSummonerV1.SummonerDTO, Exclude<PlatformRoute, PlatformRoute.PBE1>, {} | [], {}, undefined>,
            /**
             * Get a summoner by summoner ID.
             */
            getBySummonerId: {
                path: "/tft/summoner/v1/summoners/{encryptedSummonerId}",
                apiKeyName: "tft",
            } as ReqSpec<tftSummonerV1.SummonerDTO, Exclude<PlatformRoute, PlatformRoute.PBE1>, { encryptedSummonerId: string } | [ string ], {}, undefined>,
        },
        tournamentStubV5: {
            /**
             * Create a tournament code for the given tournament - Stub method
             */
            createTournamentCode: {
                path: "/lol/tournament-stub/v5/codes",
                method: "post",
                apiKeyName: "tournament",
            } as ReqSpec<string[], RegionalRoute.AMERICAS, {} | [], { count?: int | null, tournamentId: long }, tournamentStubV5.TournamentCodeParametersV5>,
            /**
             * Returns the tournament code DTO associated with a tournament code string - Stub Method
             */
            getTournamentCode: {
                path: "/lol/tournament-stub/v5/codes/{tournamentCode}",
                apiKeyName: "tournament",
            } as ReqSpec<tournamentStubV5.TournamentCodeV5DTO, RegionalRoute.AMERICAS, { tournamentCode: string } | [ string ], {}, undefined>,
            /**
             * Gets a list of lobby events by tournament code - Stub method
             */
            getLobbyEventsByCode: {
                path: "/lol/tournament-stub/v5/lobby-events/by-code/{tournamentCode}",
                apiKeyName: "tournament",
            } as ReqSpec<tournamentStubV5.LobbyEventV5DTOWrapper, RegionalRoute.AMERICAS, { tournamentCode: string } | [ string ], {}, undefined>,
            /**
             * Creates a tournament provider and returns its ID - Stub method
             * ## Implementation Notes
             * Providers will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.
             */
            registerProviderData: {
                path: "/lol/tournament-stub/v5/providers",
                method: "post",
                apiKeyName: "tournament",
            } as ReqSpec<int, RegionalRoute.AMERICAS, {} | [], {}, tournamentStubV5.ProviderRegistrationParametersV5>,
            /**
             * Creates a tournament and returns its ID - Stub method
             */
            registerTournament: {
                path: "/lol/tournament-stub/v5/tournaments",
                method: "post",
                apiKeyName: "tournament",
            } as ReqSpec<int, RegionalRoute.AMERICAS, {} | [], {}, tournamentStubV5.TournamentRegistrationParametersV5>,
        },
        tournamentV5: {
            /**
             * Create a tournament code for the given tournament.
             */
            createTournamentCode: {
                path: "/lol/tournament/v5/codes",
                method: "post",
                apiKeyName: "tournament",
            } as ReqSpec<string[], RegionalRoute.AMERICAS, {} | [], { tournamentId: long, count?: int | null }, tournamentV5.TournamentCodeParametersV5>,
            /**
             * Returns the tournament code DTO associated with a tournament code string.
             */
            getTournamentCode: {
                path: "/lol/tournament/v5/codes/{tournamentCode}",
                apiKeyName: "tournament",
            } as ReqSpec<tournamentV5.TournamentCodeV5DTO, RegionalRoute.AMERICAS, { tournamentCode: string } | [ string ], {}, undefined>,
            /**
             * Update the pick type, map, spectator type, or allowed puuids for a code.
             */
            updateCode: {
                path: "/lol/tournament/v5/codes/{tournamentCode}",
                method: "put",
                apiKeyName: "tournament",
            } as ReqSpec<void, RegionalRoute.AMERICAS, { tournamentCode: string } | [ string ], {}, tournamentV5.TournamentCodeUpdateParametersV5>,
            /**
             * Get games details
             * ## Implementation Notes
             * Additional endpoint to get tournament games. From this endpoint, you are able to get participants PUUID (the callback doesn't contain this info).
             * 
             * You can also use it to check if the game was recorded and validate callbacks. If the endpoint returns the game, it means a callback was attempted.
             * 
             * This will only work for tournament codes created after November 10, 2023.
             */
            getGames: {
                path: "/lol/tournament/v5/games/by-code/{tournamentCode}",
                apiKeyName: "tournament",
            } as ReqSpec<tournamentV5.TournamentGamesV5[], RegionalRoute.AMERICAS, { tournamentCode: string } | [ string ], {}, undefined>,
            /**
             * Gets a list of lobby events by tournament code.
             */
            getLobbyEventsByCode: {
                path: "/lol/tournament/v5/lobby-events/by-code/{tournamentCode}",
                apiKeyName: "tournament",
            } as ReqSpec<tournamentV5.LobbyEventV5DTOWrapper, RegionalRoute.AMERICAS, { tournamentCode: string } | [ string ], {}, undefined>,
            /**
             * Creates a tournament provider and returns its ID.
             * ## Implementation Notes
             * Providers will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.
             */
            registerProviderData: {
                path: "/lol/tournament/v5/providers",
                method: "post",
                apiKeyName: "tournament",
            } as ReqSpec<int, RegionalRoute.AMERICAS, {} | [], {}, tournamentV5.ProviderRegistrationParametersV5>,
            /**
             * Creates a tournament and returns its ID.
             */
            registerTournament: {
                path: "/lol/tournament/v5/tournaments",
                method: "post",
                apiKeyName: "tournament",
            } as ReqSpec<int, RegionalRoute.AMERICAS, {} | [], {}, tournamentV5.TournamentRegistrationParametersV5>,
        },
        valContentV1: {
            /**
             * Get content optionally filtered by locale
             */
            getContent: {
                path: "/val/content/v1/contents",
            } as ReqSpec<valContentV1.ContentDto, ValPlatformRoute, {} | [], { locale?: string | null }, undefined>,
        },
        valMatchV1: {
            /**
             * Get match by id
             */
            getMatch: {
                path: "/val/match/v1/matches/{matchId}",
            } as ReqSpec<valMatchV1.MatchDto | null, ValPlatformRoute, { matchId: string } | [ string ], {}, undefined>,
            /**
             * Get matchlist for games played by puuid
             */
            getMatchlist: {
                path: "/val/match/v1/matchlists/by-puuid/{puuid}",
            } as ReqSpec<valMatchV1.MatchlistDto, ValPlatformRoute, { puuid: string } | [ string ], {}, undefined>,
            /**
             * Get recent matches
             * ## Implementation Notes
             * Returns a list of match ids that have completed in the last 10 minutes for live regions and 12 hours for the esports routing value. NA/LATAM/BR share a match history deployment. As such, recent matches will return a combined list of matches from those three regions. Requests are load balanced so you may see some inconsistencies as matches are added/removed from the list.
             */
            getRecent: {
                path: "/val/match/v1/recent-matches/by-queue/{queue}",
            } as ReqSpec<valMatchV1.RecentMatchesDto, ValPlatformRoute, { queue: "competitive" | "unrated" | "spikerush" | "tournamentmode" | "deathmatch" | "onefa" | "ggteam" | "hurm" } | [ "competitive" | "unrated" | "spikerush" | "tournamentmode" | "deathmatch" | "onefa" | "ggteam" | "hurm" ], {}, undefined>,
        },
        valRankedV1: {
            /**
             * Get leaderboard for the competitive queue
             */
            getLeaderboard: {
                path: "/val/ranked/v1/leaderboards/by-act/{actId}",
            } as ReqSpec<valRankedV1.LeaderboardDto | null, Exclude<ValPlatformRoute, ValPlatformRoute.ESPORTS>, { actId: string } | [ string ], { size?: int | null, startIndex?: int | null }, undefined>,
        },
        valStatusV1: {
            /**
             * Get VALORANT status for the given platform.
             */
            getPlatformData: {
                path: "/val/status/v1/platform-data",
            } as ReqSpec<valStatusV1.PlatformDataDto, Exclude<ValPlatformRoute, ValPlatformRoute.ESPORTS>, {} | [], {}, undefined>,
        },
    },
} as const;

/** API key dictionary for RiotApi endpoints. "default" corresponds to League of Legends endpoints. */
interface RiotApiKeys {
    default: string,
    tft?: string,
    lor?: string,
    tournament?: string,
    [apiKeyName: string]: string | undefined,
}

// TODO: other specs.

Object.assign(module.exports, { RiotApiConfig });
