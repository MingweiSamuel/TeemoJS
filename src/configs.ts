///////////////////////////////////////////////
//                                           //
//                     !                     //
//   This file is automatically generated!   //
//           Do not directly edit!           //
//                                           //
///////////////////////////////////////////////

// http://www.mingweisamuel.com/riotapi-schema/tool/
// Version 570eb12bfe9fb09e435976cb454f622293d0020e

const RiotApiConfig = {
    apiKeys: {
        default: null,
    },
    distFactor: 1.0,
    retries: 3,
    origin: "https://{}.api.riotgames.com",
    defaultBuckets: [
        {
            timespan: 1000,
            limit: 1,
            bins: 1,
            binFactor: 1,
            overhead: 0,
        },
    ],
    rateLimitTypeApplication: {
        name: "application",
        headerLimit: "x-app-rate-limit",
        headerCount: "x-app-rate-limit-count",
    },
    rateLimitTypeMethod: {
        name: "method",
        headerLimit: "x-method-rate-limit",
        headerCount: "x-method-rate-limit-count",
    },
    maxConcurrent: 500,
    headerLimitType: "x-rate-limit-type",
    headerRetryAfter: "retry-after",
    bucketsConfig: {},
    endpoints: {
        accountV1: {
            /**
             * Get account by puuid
             */
            getByPuuid: {
                path: "/riot/account/v1/accounts/by-puuid/{puuid}",
            } as ReqSpec<accountV1.AccountDto, AnyRoute, { puuid: string } | [ string ], {}, undefined>,
            /**
             * Get account by riot id
             */
            getByRiotId: {
                path: "/riot/account/v1/accounts/by-riot-id/{gameName}/{tagLine}",
            } as ReqSpec<accountV1.AccountDto | null, AnyRoute, { gameName: string, tagLine: string } | [ string, string ], {}, undefined>,
            /**
             * Get account by access token
             */
            getByAccessToken: {
                path: "/riot/account/v1/accounts/me",
            } as ReqSpec<accountV1.AccountDto, AnyRoute, {} | [], {}, undefined>,
            /**
             * Get active shard for a player
             */
            getActiveShard: {
                path: "/riot/account/v1/active-shards/by-game/{game}/by-puuid/{puuid}",
            } as ReqSpec<accountV1.ActiveShardDto | null, AnyRoute, { game: "val" | "lor", puuid: string } | [ "val" | "lor", string ], {}, undefined>,
        },
        championMasteryV4: {
            /**
             * Get all champion mastery entries sorted by number of champion points descending,
             */
            getAllChampionMasteries: {
                path: "/lol/champion-mastery/v4/champion-masteries/by-summoner/{encryptedSummonerId}",
            } as ReqSpec<championMasteryV4.ChampionMasteryDto[], Exclude<PlatformRoute, PlatformRoute.PBE1>, { encryptedSummonerId: string } | [ string ], {}, undefined>,
            /**
             * Get a champion mastery by player ID and champion ID.
             */
            getChampionMastery: {
                path: "/lol/champion-mastery/v4/champion-masteries/by-summoner/{encryptedSummonerId}/by-champion/{championId}",
            } as ReqSpec<championMasteryV4.ChampionMasteryDto | null, Exclude<PlatformRoute, PlatformRoute.PBE1>, { encryptedSummonerId: string, championId: long } | [ string, long ], {}, undefined>,
            /**
             * Get a player's total champion mastery score, which is the sum of individual champion mastery levels.
             */
            getChampionMasteryScore: {
                path: "/lol/champion-mastery/v4/scores/by-summoner/{encryptedSummonerId}",
            } as ReqSpec<int, Exclude<PlatformRoute, PlatformRoute.PBE1>, { encryptedSummonerId: string } | [ string ], {}, undefined>,
        },
        championV3: {
            /**
             * Returns champion rotations, including free-to-play and low-level free-to-play rotations (REST)
             */
            getChampionInfo: {
                path: "/lol/platform/v3/champion-rotations",
            } as ReqSpec<championV3.ChampionInfo, Exclude<PlatformRoute, PlatformRoute.PBE1>, {} | [], {}, undefined>,
        },
        clashV1: {
            /**
             * Get players by summoner ID.
             * ## Implementation Notes
             * This endpoint returns a list of active Clash players for a given summoner ID. If a summoner registers for multiple tournaments at the same time (e.g., Saturday and Sunday) then both registrations would appear in this list.
             */
            getPlayersBySummoner: {
                path: "/lol/clash/v1/players/by-summoner/{summonerId}",
            } as ReqSpec<clashV1.PlayerDto[], Exclude<PlatformRoute, PlatformRoute.PBE1>, { summonerId: string } | [ string ], {}, undefined>,
            /**
             * Get team by ID.
             */
            getTeamById: {
                path: "/lol/clash/v1/teams/{teamId}",
            } as ReqSpec<clashV1.TeamDto | null, Exclude<PlatformRoute, PlatformRoute.PBE1>, { teamId: string } | [ string ], {}, undefined>,
            /**
             * Get all active or upcoming tournaments.
             */
            getTournaments: {
                path: "/lol/clash/v1/tournaments",
            } as ReqSpec<clashV1.TournamentDto[], Exclude<PlatformRoute, PlatformRoute.PBE1>, {} | [], {}, undefined>,
            /**
             * Get tournament by team ID.
             */
            getTournamentByTeam: {
                path: "/lol/clash/v1/tournaments/by-team/{teamId}",
            } as ReqSpec<clashV1.TournamentDto | null, Exclude<PlatformRoute, PlatformRoute.PBE1>, { teamId: string } | [ string ], {}, undefined>,
            /**
             * Get tournament by ID.
             */
            getTournamentById: {
                path: "/lol/clash/v1/tournaments/{tournamentId}",
            } as ReqSpec<clashV1.TournamentDto | null, Exclude<PlatformRoute, PlatformRoute.PBE1>, { tournamentId: int } | [ int ], {}, undefined>,
        },
        leagueExpV4: {
            /**
             * Get all the league entries.
             */
            getLeagueEntries: {
                path: "/lol/league-exp/v4/entries/{queue}/{tier}/{division}",
            } as ReqSpec<leagueExpV4.LeagueEntryDTO[], Exclude<PlatformRoute, PlatformRoute.PBE1>, { queue: "RANKED_SOLO_5x5" | "RANKED_TFT" | "RANKED_FLEX_SR" | "RANKED_FLEX_TT", tier: "CHALLENGER" | "GRANDMASTER" | "MASTER" | "DIAMOND" | "PLATINUM" | "GOLD" | "SILVER" | "BRONZE" | "IRON", division: "I" | "II" | "III" | "IV" } | [ "RANKED_SOLO_5x5" | "RANKED_TFT" | "RANKED_FLEX_SR" | "RANKED_FLEX_TT", "CHALLENGER" | "GRANDMASTER" | "MASTER" | "DIAMOND" | "PLATINUM" | "GOLD" | "SILVER" | "BRONZE" | "IRON", "I" | "II" | "III" | "IV" ], { page?: int | null }, undefined>,
        },
        leagueV4: {
            /**
             * Get the challenger league for given queue.
             */
            getChallengerLeague: {
                path: "/lol/league/v4/challengerleagues/by-queue/{queue}",
            } as ReqSpec<leagueV4.LeagueListDTO, Exclude<PlatformRoute, PlatformRoute.PBE1>, { queue: "RANKED_SOLO_5x5" | "RANKED_FLEX_SR" | "RANKED_FLEX_TT" } | [ "RANKED_SOLO_5x5" | "RANKED_FLEX_SR" | "RANKED_FLEX_TT" ], {}, undefined>,
            /**
             * Get league entries in all queues for a given summoner ID.
             */
            getLeagueEntriesForSummoner: {
                path: "/lol/league/v4/entries/by-summoner/{encryptedSummonerId}",
            } as ReqSpec<leagueV4.LeagueEntryDTO[], Exclude<PlatformRoute, PlatformRoute.PBE1>, { encryptedSummonerId: string } | [ string ], {}, undefined>,
            /**
             * Get all the league entries.
             */
            getLeagueEntries: {
                path: "/lol/league/v4/entries/{queue}/{tier}/{division}",
            } as ReqSpec<leagueV4.LeagueEntryDTO[], Exclude<PlatformRoute, PlatformRoute.PBE1>, { queue: "RANKED_SOLO_5x5" | "RANKED_FLEX_SR" | "RANKED_FLEX_TT", tier: "DIAMOND" | "PLATINUM" | "GOLD" | "SILVER" | "BRONZE" | "IRON", division: "I" | "II" | "III" | "IV" } | [ "RANKED_SOLO_5x5" | "RANKED_FLEX_SR" | "RANKED_FLEX_TT", "DIAMOND" | "PLATINUM" | "GOLD" | "SILVER" | "BRONZE" | "IRON", "I" | "II" | "III" | "IV" ], { page?: int | null }, undefined>,
            /**
             * Get the grandmaster league of a specific queue.
             */
            getGrandmasterLeague: {
                path: "/lol/league/v4/grandmasterleagues/by-queue/{queue}",
            } as ReqSpec<leagueV4.LeagueListDTO, Exclude<PlatformRoute, PlatformRoute.PBE1>, { queue: "RANKED_SOLO_5x5" | "RANKED_FLEX_SR" | "RANKED_FLEX_TT" } | [ "RANKED_SOLO_5x5" | "RANKED_FLEX_SR" | "RANKED_FLEX_TT" ], {}, undefined>,
            /**
             * Get league with given ID, including inactive entries.
             */
            getLeagueById: {
                path: "/lol/league/v4/leagues/{leagueId}",
            } as ReqSpec<leagueV4.LeagueListDTO | null, Exclude<PlatformRoute, PlatformRoute.PBE1>, { leagueId: string } | [ string ], {}, undefined>,
            /**
             * Get the master league for given queue.
             */
            getMasterLeague: {
                path: "/lol/league/v4/masterleagues/by-queue/{queue}",
            } as ReqSpec<leagueV4.LeagueListDTO, Exclude<PlatformRoute, PlatformRoute.PBE1>, { queue: "RANKED_SOLO_5x5" | "RANKED_FLEX_SR" | "RANKED_FLEX_TT" } | [ "RANKED_SOLO_5x5" | "RANKED_FLEX_SR" | "RANKED_FLEX_TT" ], {}, undefined>,
        },
        lolStatusV3: {
            /**
             * Get League of Legends status for the given shard.
             * ## Rate Limit Notes
             * Requests to this API are not counted against the application Rate Limits.
             */
            getShardData: {
                path: "/lol/status/v3/shard-data",
            } as ReqSpec<lolStatusV3.ShardStatus, PlatformRoute, {} | [], {}, undefined>,
        },
        lolStatusV4: {
            /**
             * Get League of Legends status for the given platform.
             */
            getPlatformData: {
                path: "/lol/status/v4/platform-data",
            } as ReqSpec<lolStatusV4.PlatformDataDto, PlatformRoute, {} | [], {}, undefined>,
        },
        lorDeckV1: {
            /**
             * Get a list of the calling user's decks.
             */
            getDecks: {
                path: "/lor/deck/v1/decks/me",
                apiKeyName: "lor",
            } as ReqSpec<lorDeckV1.DeckDto[], RegionalRoute, {} | [], {}, undefined>,
            /**
             * Create a new deck for the calling user.
             */
            createDeck: {
                path: "/lor/deck/v1/decks/me",
                method: "post",
                apiKeyName: "lor",
            } as ReqSpec<string, RegionalRoute, {} | [], {}, lorDeckV1.NewDeckDto>,
        },
        lorInventoryV1: {
            /**
             * Return a list of cards owned by the calling user.
             */
            getCards: {
                path: "/lor/inventory/v1/cards/me",
                apiKeyName: "lor",
            } as ReqSpec<lorInventoryV1.CardDto[], RegionalRoute, {} | [], {}, undefined>,
        },
        lorMatchV1: {
            /**
             * Get a list of match ids by PUUID
             */
            getMatchIdsByPUUID: {
                path: "/lor/match/v1/matches/by-puuid/{puuid}/ids",
                apiKeyName: "lor",
            } as ReqSpec<string[], Exclude<RegionalRoute, RegionalRoute.SEA>, { puuid: string } | [ string ], {}, undefined>,
            /**
             * Get match by id
             */
            getMatch: {
                path: "/lor/match/v1/matches/{matchId}",
                apiKeyName: "lor",
            } as ReqSpec<lorMatchV1.MatchDto, Exclude<RegionalRoute, RegionalRoute.SEA>, { matchId: string } | [ string ], {}, undefined>,
        },
        lorRankedV1: {
            /**
             * Get the players in Master tier.
             */
            getLeaderboards: {
                path: "/lor/ranked/v1/leaderboards",
                apiKeyName: "lor",
            } as ReqSpec<lorRankedV1.LeaderboardDto, RegionalRoute, {} | [], {}, undefined>,
        },
        lorStatusV1: {
            /**
             * Get Legends of Runeterra status for the given platform.
             */
            getPlatformData: {
                path: "/lor/status/v1/platform-data",
                apiKeyName: "lor",
            } as ReqSpec<lorStatusV1.PlatformDataDto, RegionalRoute, {} | [], {}, undefined>,
        },
        matchV4: {
            /**
             * Get match IDs by tournament code.
             */
            getMatchIdsByTournamentCode: {
                path: "/lol/match/v4/matches/by-tournament-code/{tournamentCode}/ids",
            } as ReqSpec<long[], Exclude<PlatformRoute, PlatformRoute.PBE1>, { tournamentCode: string } | [ string ], {}, undefined>,
            /**
             * Get match by match ID.
             */
            getMatch: {
                path: "/lol/match/v4/matches/{matchId}",
            } as ReqSpec<matchV4.MatchDto | null, Exclude<PlatformRoute, PlatformRoute.PBE1>, { matchId: long } | [ long ], {}, undefined>,
            /**
             * Get match by match ID and tournament code.
             */
            getMatchByTournamentCode: {
                path: "/lol/match/v4/matches/{matchId}/by-tournament-code/{tournamentCode}",
            } as ReqSpec<matchV4.MatchDto, Exclude<PlatformRoute, PlatformRoute.PBE1>, { matchId: long, tournamentCode: string } | [ long, string ], {}, undefined>,
            /**
             * Get matchlist for games played on given account ID and platform ID and filtered using given filter parameters, if any.
             * ## Implementation Notes
             * A number of optional parameters are provided for filtering. It is up to the caller to ensure that the combination of filter parameters provided is valid for the requested account, otherwise, no matches may be returned.
             * 
             * If beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned.
             * 
             * If beginTime is specified, but not endTime, then endTime defaults to the the current unix timestamp in milliseconds (the maximum time range limitation is not observed in this specific case). If endTime is specified, but not beginTime, then beginTime defaults to the start of the account's match history returning a 400 due to the maximum time range limitation. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned.
             */
            getMatchlist: {
                path: "/lol/match/v4/matchlists/by-account/{encryptedAccountId}",
            } as ReqSpec<matchV4.MatchlistDto | null, Exclude<PlatformRoute, PlatformRoute.PBE1>, { encryptedAccountId: string } | [ string ], { champion?: int[] | null, queue?: int[] | null, season?: int[] | null, endTime?: long | null, beginTime?: long | null, endIndex?: int | null, beginIndex?: int | null }, undefined>,
            /**
             * Get match timeline by match ID.
             * ## Implementation Notes
             * Not all matches have timeline data.
             */
            getMatchTimeline: {
                path: "/lol/match/v4/timelines/by-match/{matchId}",
            } as ReqSpec<matchV4.MatchTimelineDto | null, Exclude<PlatformRoute, PlatformRoute.PBE1>, { matchId: long } | [ long ], {}, undefined>,
        },
        matchV5: {
            /**
             * Get a list of match ids by puuid
             */
            getMatchIdsByPUUID: {
                path: "/lol/match/v5/matches/by-puuid/{puuid}/ids",
            } as ReqSpec<string[], Exclude<RegionalRoute, RegionalRoute.SEA>, { puuid: string } | [ string ], { start?: int | null, count?: int | null }, undefined>,
            /**
             * Get a match by match id
             */
            getMatch: {
                path: "/lol/match/v5/matches/{matchId}",
            } as ReqSpec<matchV5.MatchDto | null, Exclude<RegionalRoute, RegionalRoute.SEA>, { matchId: string } | [ string ], {}, undefined>,
            /**
             * Get a match timeline by match id
             */
            getTimeline: {
                path: "/lol/match/v5/matches/{matchId}/timeline",
            } as ReqSpec<matchV5.MatchTimelineDto | null, Exclude<RegionalRoute, RegionalRoute.SEA>, { matchId: string } | [ string ], {}, undefined>,
        },
        spectatorV4: {
            /**
             * Get current game information for the given summoner ID.
             */
            getCurrentGameInfoBySummoner: {
                path: "/lol/spectator/v4/active-games/by-summoner/{encryptedSummonerId}",
            } as ReqSpec<spectatorV4.CurrentGameInfo | null, Exclude<PlatformRoute, PlatformRoute.PBE1>, { encryptedSummonerId: string } | [ string ], {}, undefined>,
            /**
             * Get list of featured games.
             */
            getFeaturedGames: {
                path: "/lol/spectator/v4/featured-games",
            } as ReqSpec<spectatorV4.FeaturedGames, Exclude<PlatformRoute, PlatformRoute.PBE1>, {} | [], {}, undefined>,
        },
        summonerV4: {
            /**
             * Get a summoner by account ID.
             */
            getByAccountId: {
                path: "/lol/summoner/v4/summoners/by-account/{encryptedAccountId}",
            } as ReqSpec<summonerV4.SummonerDTO, Exclude<PlatformRoute, PlatformRoute.PBE1>, { encryptedAccountId: string } | [ string ], {}, undefined>,
            /**
             * Get a summoner by summoner name.
             */
            getBySummonerName: {
                path: "/lol/summoner/v4/summoners/by-name/{summonerName}",
            } as ReqSpec<summonerV4.SummonerDTO | null, Exclude<PlatformRoute, PlatformRoute.PBE1>, { summonerName: string } | [ string ], {}, undefined>,
            /**
             * Get a summoner by PUUID.
             */
            getByPUUID: {
                path: "/lol/summoner/v4/summoners/by-puuid/{encryptedPUUID}",
            } as ReqSpec<summonerV4.SummonerDTO, Exclude<PlatformRoute, PlatformRoute.PBE1>, { encryptedPUUID: string } | [ string ], {}, undefined>,
            /**
             * Get a summoner by access token.
             */
            getByAccessToken: {
                path: "/lol/summoner/v4/summoners/me",
            } as ReqSpec<summonerV4.SummonerDTO, Exclude<PlatformRoute, PlatformRoute.PBE1>, {} | [], {}, undefined>,
            /**
             * Get a summoner by summoner ID.
             */
            getBySummonerId: {
                path: "/lol/summoner/v4/summoners/{encryptedSummonerId}",
            } as ReqSpec<summonerV4.SummonerDTO, Exclude<PlatformRoute, PlatformRoute.PBE1>, { encryptedSummonerId: string } | [ string ], {}, undefined>,
        },
        tftLeagueV1: {
            /**
             * Get the challenger league.
             */
            getChallengerLeague: {
                path: "/tft/league/v1/challenger",
                apiKeyName: "tft",
            } as ReqSpec<tftLeagueV1.LeagueListDTO, Exclude<PlatformRoute, PlatformRoute.PBE1>, {} | [], {}, undefined>,
            /**
             * Get league entries for a given summoner ID.
             */
            getLeagueEntriesForSummoner: {
                path: "/tft/league/v1/entries/by-summoner/{summonerId}",
                apiKeyName: "tft",
            } as ReqSpec<tftLeagueV1.LeagueEntryDTO[], Exclude<PlatformRoute, PlatformRoute.PBE1>, { summonerId: string } | [ string ], {}, undefined>,
            /**
             * Get all the league entries.
             */
            getLeagueEntries: {
                path: "/tft/league/v1/entries/{tier}/{division}",
                apiKeyName: "tft",
            } as ReqSpec<tftLeagueV1.LeagueEntryDTO[], Exclude<PlatformRoute, PlatformRoute.PBE1>, { tier: "DIAMOND" | "PLATINUM" | "GOLD" | "SILVER" | "BRONZE" | "IRON", division: "I" | "II" | "III" | "IV" } | [ "DIAMOND" | "PLATINUM" | "GOLD" | "SILVER" | "BRONZE" | "IRON", "I" | "II" | "III" | "IV" ], { page?: int | null }, undefined>,
            /**
             * Get the grandmaster league.
             */
            getGrandmasterLeague: {
                path: "/tft/league/v1/grandmaster",
                apiKeyName: "tft",
            } as ReqSpec<tftLeagueV1.LeagueListDTO, Exclude<PlatformRoute, PlatformRoute.PBE1>, {} | [], {}, undefined>,
            /**
             * Get league with given ID, including inactive entries.
             */
            getLeagueById: {
                path: "/tft/league/v1/leagues/{leagueId}",
                apiKeyName: "tft",
            } as ReqSpec<tftLeagueV1.LeagueListDTO | null, Exclude<PlatformRoute, PlatformRoute.PBE1>, { leagueId: string } | [ string ], {}, undefined>,
            /**
             * Get the master league.
             */
            getMasterLeague: {
                path: "/tft/league/v1/master",
                apiKeyName: "tft",
            } as ReqSpec<tftLeagueV1.LeagueListDTO, Exclude<PlatformRoute, PlatformRoute.PBE1>, {} | [], {}, undefined>,
            /**
             * Get the top rated ladder for given queue
             */
            getTopRatedLadder: {
                path: "/tft/league/v1/rated-ladders/{queue}/top",
                apiKeyName: "tft",
            } as ReqSpec<tftLeagueV1.TopRatedLadderEntryDto[], Exclude<PlatformRoute, PlatformRoute.PBE1>, { queue: "RANKED_TFT_TURBO" } | [ "RANKED_TFT_TURBO" ], {}, undefined>,
        },
        tftMatchV1: {
            /**
             * Get a list of match ids by PUUID
             */
            getMatchIdsByPUUID: {
                path: "/tft/match/v1/matches/by-puuid/{puuid}/ids",
                apiKeyName: "tft",
            } as ReqSpec<string[], Exclude<RegionalRoute, RegionalRoute.SEA>, { puuid: string } | [ string ], { count?: int | null }, undefined>,
            /**
             * Get a match by match id
             */
            getMatch: {
                path: "/tft/match/v1/matches/{matchId}",
                apiKeyName: "tft",
            } as ReqSpec<tftMatchV1.MatchDto | null, Exclude<RegionalRoute, RegionalRoute.SEA>, { matchId: string } | [ string ], {}, undefined>,
        },
        tftSummonerV1: {
            /**
             * Get a summoner by account ID.
             */
            getByAccountId: {
                path: "/tft/summoner/v1/summoners/by-account/{encryptedAccountId}",
                apiKeyName: "tft",
            } as ReqSpec<tftSummonerV1.SummonerDTO, Exclude<PlatformRoute, PlatformRoute.PBE1>, { encryptedAccountId: string } | [ string ], {}, undefined>,
            /**
             * Get a summoner by summoner name.
             */
            getBySummonerName: {
                path: "/tft/summoner/v1/summoners/by-name/{summonerName}",
                apiKeyName: "tft",
            } as ReqSpec<tftSummonerV1.SummonerDTO | null, Exclude<PlatformRoute, PlatformRoute.PBE1>, { summonerName: string } | [ string ], {}, undefined>,
            /**
             * Get a summoner by PUUID.
             */
            getByPUUID: {
                path: "/tft/summoner/v1/summoners/by-puuid/{encryptedPUUID}",
                apiKeyName: "tft",
            } as ReqSpec<tftSummonerV1.SummonerDTO, Exclude<PlatformRoute, PlatformRoute.PBE1>, { encryptedPUUID: string } | [ string ], {}, undefined>,
            /**
             * Get a summoner by access token.
             */
            getByAccessToken: {
                path: "/tft/summoner/v1/summoners/me",
                apiKeyName: "tft",
            } as ReqSpec<tftSummonerV1.SummonerDTO, Exclude<PlatformRoute, PlatformRoute.PBE1>, {} | [], {}, undefined>,
            /**
             * Get a summoner by summoner ID.
             */
            getBySummonerId: {
                path: "/tft/summoner/v1/summoners/{encryptedSummonerId}",
                apiKeyName: "tft",
            } as ReqSpec<tftSummonerV1.SummonerDTO, Exclude<PlatformRoute, PlatformRoute.PBE1>, { encryptedSummonerId: string } | [ string ], {}, undefined>,
        },
        thirdPartyCodeV4: {
            /**
             * Get third party code for a given summoner ID.
             */
            getThirdPartyCodeBySummonerId: {
                path: "/lol/platform/v4/third-party-code/by-summoner/{encryptedSummonerId}",
            } as ReqSpec<string, Exclude<PlatformRoute, PlatformRoute.PBE1>, { encryptedSummonerId: string } | [ string ], {}, undefined>,
        },
        tournamentStubV4: {
            /**
             * Create a mock tournament code for the given tournament.
             */
            createTournamentCode: {
                path: "/lol/tournament-stub/v4/codes",
                method: "post",
                apiKeyName: "tournament",
            } as ReqSpec<string[], RegionalRoute.AMERICAS, {} | [], { count?: int | null, tournamentId: long }, tournamentStubV4.TournamentCodeParameters>,
            /**
             * Gets a mock list of lobby events by tournament code.
             */
            getLobbyEventsByCode: {
                path: "/lol/tournament-stub/v4/lobby-events/by-code/{tournamentCode}",
                apiKeyName: "tournament",
            } as ReqSpec<tournamentStubV4.LobbyEventDTOWrapper, RegionalRoute.AMERICAS, { tournamentCode: string } | [ string ], {}, undefined>,
            /**
             * Creates a mock tournament provider and returns its ID.
             * ## Implementation Notes
             * Providers will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.
             */
            registerProviderData: {
                path: "/lol/tournament-stub/v4/providers",
                method: "post",
                apiKeyName: "tournament",
            } as ReqSpec<int, RegionalRoute.AMERICAS, {} | [], {}, tournamentStubV4.ProviderRegistrationParameters>,
            /**
             * Creates a mock tournament and returns its ID.
             */
            registerTournament: {
                path: "/lol/tournament-stub/v4/tournaments",
                method: "post",
                apiKeyName: "tournament",
            } as ReqSpec<int, RegionalRoute.AMERICAS, {} | [], {}, tournamentStubV4.TournamentRegistrationParameters>,
        },
        tournamentV4: {
            /**
             * Create a tournament code for the given tournament.
             */
            createTournamentCode: {
                path: "/lol/tournament/v4/codes",
                method: "post",
                apiKeyName: "tournament",
            } as ReqSpec<string[], RegionalRoute.AMERICAS, {} | [], { count?: int | null, tournamentId: long }, tournamentV4.TournamentCodeParameters>,
            /**
             * Returns the tournament code DTO associated with a tournament code string.
             */
            getTournamentCode: {
                path: "/lol/tournament/v4/codes/{tournamentCode}",
                apiKeyName: "tournament",
            } as ReqSpec<tournamentV4.TournamentCodeDTO, RegionalRoute.AMERICAS, { tournamentCode: string } | [ string ], {}, undefined>,
            /**
             * Update the pick type, map, spectator type, or allowed summoners for a code.
             */
            updateCode: {
                path: "/lol/tournament/v4/codes/{tournamentCode}",
                method: "put",
                apiKeyName: "tournament",
            } as ReqSpec<void, RegionalRoute.AMERICAS, { tournamentCode: string } | [ string ], {}, tournamentV4.TournamentCodeUpdateParameters>,
            /**
             * Gets a list of lobby events by tournament code.
             */
            getLobbyEventsByCode: {
                path: "/lol/tournament/v4/lobby-events/by-code/{tournamentCode}",
                apiKeyName: "tournament",
            } as ReqSpec<tournamentV4.LobbyEventDTOWrapper, RegionalRoute.AMERICAS, { tournamentCode: string } | [ string ], {}, undefined>,
            /**
             * Creates a tournament provider and returns its ID.
             * ## Implementation Notes
             * Providers will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.
             */
            registerProviderData: {
                path: "/lol/tournament/v4/providers",
                method: "post",
                apiKeyName: "tournament",
            } as ReqSpec<int, RegionalRoute.AMERICAS, {} | [], {}, tournamentV4.ProviderRegistrationParameters>,
            /**
             * Creates a tournament and returns its ID.
             */
            registerTournament: {
                path: "/lol/tournament/v4/tournaments",
                method: "post",
                apiKeyName: "tournament",
            } as ReqSpec<int, RegionalRoute.AMERICAS, {} | [], {}, tournamentV4.TournamentRegistrationParameters>,
        },
        valContentV1: {
            /**
             * Get content optionally filtered by locale
             */
            getContent: {
                path: "/val/content/v1/contents",
            } as ReqSpec<valContentV1.ContentDto, ValPlatformRoute, {} | [], { locale?: string | null }, undefined>,
        },
        valMatchV1: {
            /**
             * Get match by id
             */
            getMatch: {
                path: "/val/match/v1/matches/{matchId}",
            } as ReqSpec<valMatchV1.MatchDto | null, ValPlatformRoute, { matchId: string } | [ string ], {}, undefined>,
            /**
             * Get matchlist for games played by puuid
             */
            getMatchlist: {
                path: "/val/match/v1/matchlists/by-puuid/{puuid}",
            } as ReqSpec<valMatchV1.MatchlistDto, ValPlatformRoute, { puuid: string } | [ string ], {}, undefined>,
            /**
             * Get recent matches
             * ## Implementation Notes
             * Returns a list of match ids that have completed in the last 10 minutes for live regions and 12 hours for the esports routing value. NA/LATAM/BR share a match history deployment. As such, recent matches will return a combined list of matches from those three regions. Requests are load balanced so you may see some inconsistencies as matches are added/removed from the list.
             */
            getRecent: {
                path: "/val/match/v1/recent-matches/by-queue/{queue}",
            } as ReqSpec<valMatchV1.RecentMatchesDto, ValPlatformRoute, { queue: "competitive" | "unrated" | "spikerush" | "tournamentmode" } | [ "competitive" | "unrated" | "spikerush" | "tournamentmode" ], {}, undefined>,
        },
        valRankedV1: {
            /**
             * Get leaderboard for the competitive queue
             */
            getLeaderboard: {
                path: "/val/ranked/v1/leaderboards/by-act/{actId}",
            } as ReqSpec<valRankedV1.LeaderboardDto | null, Exclude<ValPlatformRoute, ValPlatformRoute.ESPORTS>, { actId: string } | [ string ], { size?: int | null, startIndex?: int | null }, undefined>,
        },
        valStatusV1: {
            /**
             * Get VALORANT status for the given platform.
             */
            getPlatformData: {
                path: "/val/status/v1/platform-data",
            } as ReqSpec<valStatusV1.PlatformDataDto, Exclude<ValPlatformRoute, ValPlatformRoute.ESPORTS>, {} | [], {}, undefined>,
        },
    },
} as const;

/** API key dictionary for RiotApi endpoints. "default" corresponds to League of Legends endpoints. */
interface RiotApiKeys {
    default: string,
    tft?: string,
    lor?: string,
    tournament?: string,
    [apiKeyName: string]: string | undefined,
}

// TODO: other specs.

Object.assign(module.exports, { RiotApiConfig });
